<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PAEEEM.DataAccessLayer</name>
    </assembly>
    <members>
        <member name="T:PAEEEM.DataAccessLayer.CAT_ESTADODAL">
            <summary>
            CAT_ESTADO data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTADODAL.Get_All_CAT_ESTADO">
            <summary>
            Get All the Estado
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_ESTADODAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_PRODUCTODal.Get_All_CAT_ESTATUS_PRODUCTO">
            <summary>
            Get All the Estado
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_ESTATUS_PRODUCTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TARIFADAL">
            <summary>
            CAT_TARIFA data access lay
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_TARIFADAL._classinstance">
            <summary>
            Class instance field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TARIFADAL.Get_All_CAT_TARIFA">
            <summary>
            Get All the Tarifa
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TARIFADAL.GetTarifaWithDate(System.DateTime,System.Int32)">
            <summary>
            Get tarifa with date
            </summary>
            <param name="currentDate">Current Date</param>
            <param name="programID">Program ID</param>
            <returns>Table With Tarifa Cost</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TARIFADAL.GetTarifaWithoutDate(System.Int32)">
            <summary>
            Get tarifa without date
            </summary>
            <param name="programID">Program ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TARIFADAL.GetTarifaWithName(System.String)">
            <summary>
            Get rate with rate name
            </summary>
            <param name="ratename"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TARIFADAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL">
            <summary>
            K_TARIFA_COSTO data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.Get_K_TARIFA_COSTOListByPagerAndEstadoID(System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32@)">
            /// <summary>
            Get Record by Estado
            </summary>
            <param name="sorder"></param>
            <param name="currentPageIndex"></param>
            <param name="pageSize"></param>
            <param name="Cve_Estado"></param>
            <param name="Periodo"></param>
            <param name="Cve_Tarifa"></param>
            <param name="pagecount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.Insert_K_TARIFA_COSTO(PAEEEM.Entities.K_TARIFA_COSTOModel)">
            <summary>
            Add K_TARIFA_COSTO
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.GetTarifaAndCostWithDateEstado(System.String,System.Int32,System.DateTime)">
            <summary>
            Get tarifa and cost with tarifa and estado
            </summary>
            <param name="tarifa">Tarifa ID</param>
            <param name="estado">Estado ID</param>
            <param name="currentDate">Current Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.GetTarifaAndCostByEstadoAndPeriod(System.Int32,System.DateTime)">
            <summary>
            Get tarifa and cost by tarifa and period
            </summary>
            <param name="estado">estado ID</param>
            <param name="period">period</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.GetTarifaAndCostByPK(System.Int32)">
            <summary>
            Get tarifa and cost by pk
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.UpdateTarifaAndCost(PAEEEM.Entities.K_TARIFA_COSTOModel)">
            <summary>
            edit tarifa and cost
            </summary>
            <param name="model">K_TARIFA_COSTOModel</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_TARIFA_COSTODAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CatEstatusDal">
            <summary>
            Data Access Layer model for table CAT_ESTATUS
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CatEstatusDal._classInstance">
            <summary>
            Private class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CatEstatusDal.GetCreditEstatus">
            <summary>
            Get credit status
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CatEstatusDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CatZonaDal">
            <summary>
            Zona Data Access Layer
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CatZonaDal._classInstance">
            <summary>
            Private class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CatZonaDal.GetZonaWithRegional(System.Int32)">
            <summary>
            Get zones
            </summary>
            <param name="regional"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CatZonaDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_ESTATUS_CENTRO_DISPDAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_ESTATUS_CENTRO_DISPDAL._classInstance">
            <summary>
            Private class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CENTRO_DISPDAL.GetDisposalCenterEstatus">
            <summary>
            Get disposal center status
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_ESTATUS_CENTRO_DISPDAL.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_ESTATUS_DISPOSICIONDAL">
            <summary>
            Disposal Center Status
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_ESTATUS_DISPOSICIONDAL._classInstance">
            <summary>
            Private class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_DISPOSICIONDAL.GetDispositionEstatus">
            <summary>
            Get credit status
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_ESTATUS_DISPOSICIONDAL.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_ESTATUS_PROVEEDORDal">
            <summary>
            Provider status
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_ESTATUS_PROVEEDORDal._classInstance">
            <summary>
            Private class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_PROVEEDORDal.Get_Provider_Estatus">
            <summary>
            Get disposal center status
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_ESTATUS_PROVEEDORDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.GlossaryDal">
            <summary>
            Glossary table is used to store the configuration information of other catalogs
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.GlossaryDal._instance">
            <summary>
            property field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.GlossaryDal.GetFieldsWithTableName(System.String)">
            <summary>
            Get all the columns by table
            </summary>
            <param name="tableName">specified table name</param>
            <returns>field list</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.GlossaryDal.GetTablesName">
            <summary>
            Get all table names for the database
            </summary>
            <returns>table names collection</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.GlossaryDal.GetConfigurations(System.String)">
            <summary>
            Get all the configuration for each field in the specified table
            </summary>
            <param name="tableName">specified table name</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.GlossaryDal.InsertConfiguration(PAEEEM.Helpers.GlossaryField)">
            <summary>
            Insert new record into glossary table
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.GlossaryDal.UpdateConfiguration(PAEEEM.Helpers.GlossaryField)">
            <summary>
            Update the field configurations for some table
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.GlossaryDal.ClassInstance">
            <summary>
            Class Instance property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_RESIDUO_MATERIALDal">
            <summary>
            Register materials
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_RESIDUO_MATERIALDal.GetGasTypeByTechnology(System.String)">
            <summary>
            get gas type
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_RESIDUO_MATERIALDal.GetMaterialTypeByTechnology(System.String)">
            <summary>
            
            </summary>
            <param name="technology"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_RESIDUO_MATERIALDal.GetMaterialByPk(System.String)">
            <summary>
            Get material
            </summary>
            <param name="pk"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_RESIDUO_MATERIALDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_ACTA_INHABILITACIONDal">
            <summary>
            K_ACTA_INHABILITACION data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_ACTA_INHABILITACIONDal.Insert_K_ACTA_INHABILITACION(PAEEEM.Entities.K_ACTA_INHABILITACIONModel)">
            <summary>
            insert
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_ACTA_INHABILITACIONDal.GetFromDateForFinalActOrUnable(System.String)">
            <summary>
            get last date from final disposal act 
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_ACTA_INHABILITACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_ACTA_RECUPERACIONDal">
            <summary>
            K_ACTA_RECUPERACION data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_ACTA_RECUPERACIONDal.GetFromDateForFinalActOrSupervision(System.String)">
            <summary>
            get last date from final disposal act 
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_ACTA_RECUPERACIONDal.Insert_K_ACTA_RECUPERACION(PAEEEM.Entities.K_ACTA_RECUPERACIONModel)">
            <summary>
            insert
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_ACTA_RECUPERACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL">
            <summary>
            K_CORTE_PARCIAL data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.Insert_K_CORTE_PARCIAL(PAEEEM.Entities.K_CORTE_PARCIALModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.GetCreateDate">
            <summary>
            get create date of partial cut
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.GetPartialCutsForApproval(System.Int32,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="Program"></param>
            <param name="Disposal"></param>
            <param name="DisposalType"></param>
            <param name="CreateDate"></param>
            <param name="Estatus"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.Get_Partial_Act_CreateDate(System.Int32,System.String)">
            <summary>
            Get partial act create date
            </summary>
            <param name="DisposalID"></param>
            <param name="UserType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.GetPartialCutsForFinialAct(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get partial cuts
            </summary>
            <param name="Disposal"></param>
            <param name="DisposalType"></param>
            <param name="FromPeso"></param>
            <param name="ToPeso"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.GetPartialCutsProductsForApproval(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            get products with partial cut for approval
            </summary>
            <param name="PartialCode"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.Get_PartialAct_ForFinial(System.Int32,System.String)">
            <summary>
            Get partial acts
            </summary>
            <param name="Disposal"></param>
            <param name="UserType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.ApprovalProducts(System.String,System.String)">
            <summary>
            approval products
            </summary>
            <param name="PartialCode"></param>
            <param name="RowNum"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.ApprovalProductsAndStatus(System.String,System.Int32)">
            <summary>
            Approve products and update its status
            </summary>
            <param name="PartialCode"></param>
            <param name="Estatus"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CORTE_PARCIALDAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_INHABILITACIONDal">
            <summary>
            
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_INHABILITACIONDal.Insert_K_INHABILITACION(PAEEEM.Entities.K_INHABILITACIONModel,System.Int32@)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="Id_Inhabilitacion"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_INHABILITACIONDal.UpdateFinalActID(System.String,System.String)">
            <summary>
            Update K_INHABILITACION Number of Final Act
            </summary>
            <param name="Id_Recuperacion"></param>
            <param name="finalActID"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_INHABILITACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_INHABILITACION_PRODUCTODal">
            <summary>
            Inhabilitación process and product relationships
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_INHABILITACION_PRODUCTODal._classinstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_INHABILITACION_PRODUCTODal.Insert_K_INHABILITACION_PRODUCTO(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Id_Inhabilitacion"></param>
            <param name="Id_Credito_Sustitucion"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_INHABILITACION_PRODUCTODal.GetWholeDisabledProducts">
            <summary>
            Get all the disabled products
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_INHABILITACION_PRODUCTODal.GetUnableProductsForAct(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            get supervision products for generate final act
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="UserID"></param>
            <param name="UserType"></param>
            <param name="disposalId"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_INHABILITACION_PRODUCTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_PRODUCTO_CHARACTERSDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_RECUPERACIONDal">
            <summary>
            
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.GetTodayRecordByTechnologyAndMaterial(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            check if the special material have registered
            </summary>
            <param name="technology"></param>
            <param name="material"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.Insert_K_RECUPERACION(PAEEEM.Entities.K_RECUPERACIONModel,System.Int32@)">
            <summary>
            insert K_RECUPERACION
            </summary>
            <param name="instance"></param>
            <param name="Id_Recuperacion"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.GetRecoveryMaterials(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            get all recovery materials
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="registryDate"></param>
            <param name="material"></param>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.GetRecoveryMaterialByRecoveryID(System.String)">
            <summary>
            get recovery material by pk
            </summary>
            <param name="Id_Recuperacion"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.UpdateMaterialWeight(System.String,System.Double)">
            <summary>
            update material weight
            </summary>
            <param name="Id_Recuperacion"></param>
            <param name="weight"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.Delete_K_RECUPERACION(System.String)">
            <summary>
            delete K_RECUPERACION
            </summary>
            <param></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.UpdateFinalActID(System.String,System.String)">
            <summary>
            Update K_RECUPERACION Number of Final Act
            </summary>
            <param name="Id_Recuperacion"></param>
            <param name="finalActID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.GetLastMaterialRecoveryDateByTechnologyAndMaterial(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Get date of last material recovery registry without Act Number
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="material"></param>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_RECUPERACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal">
            <summary>
            Relation between register process and product
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal._classinstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal.Insert_K_RECUPERACION_PRODUCTO(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="Id_Recuperacion"></param>
            <param name="Id_Credito_Sustitucion"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal.Delete_K_RECUPERACION_PRODUCTOById_Recuperacion(System.String)">
            <summary>
            
            </summary>
            <param name="Id_Recuperacion"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal.GetSupervisionProducts(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            get supervision products for generate final act
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="UserID"></param>
            <param name="UserType"></param>
            <param name="disposalId"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal.GetFgInspectByIDCredit(System.String)">
            <summary>
            
            </summary>
            <param name="CreditSusID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal.UpdateK_Recuperacion_Product(System.String,System.String)">
            <summary>
            Update reception product
            </summary>
            <param name="CreditIDList"></param>
            <param name="RecuperacionDate"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_RECUPERACION_PRODUCTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_RECUP_RESIDUOSDAL">
            <summary>
            K_RECUP_RESIDUOSDAL data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUP_RESIDUOSDAL.Insert_K_RECUP_RESIDUOS(PAEEEM.Entities.K_RECUP_RESIDUOSModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUP_RESIDUOSDAL.UpdateK_RECUP_RESIDUOSStatus(System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Fg_Incluido"></param>
            <param name="ID_Estatus"></param>
            <param name="Credit"></param>
            <param name="Codigo_Producto"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_RECUP_RESIDUOSDAL.Get_MaterialByCreditAndProduct(System.String,System.String)">
            <summary>
            get material data by credit and product code
            </summary>
            <param name="No_Credito"></param>
            <param name="Product"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_RECUP_RESIDUOSDAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_TECNOLOGIA_MATERIALDAL">
            <summary>
            K_TECNOLOGIA_MATERIALDAL data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TECNOLOGIA_MATERIALDAL.GetMaterialByTechnology(System.Int32)">
            <summary>
            get material with technology
            </summary>
            <param name="Technology"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_TECNOLOGIA_MATERIALDAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_TECNOLOGIA_RESIDUO_MATERIALDal">
            <summary>
            
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_TECNOLOGIA_RESIDUO_MATERIALDal.GetOrderByTechnologyAndMaterial(System.String,System.String)">
            <summary>
            Get materials process order by technology
            </summary>
            <param name="technology">program</param>
            <param name="material">technology</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_TECNOLOGIA_RESIDUO_MATERIALDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.ScheduledNotificationDal">
            <summary>
            
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduledNotificationDal.InsertScheduledNotification(PAEEEM.Entities.ScheduledNotificationEntity)">
            <summary>
            
            </summary>
            <param name="scheduledNotificationEntity"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduledNotificationDal.GetScheduledNotifications(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduledNotificationDal.UpdateLastSentTime(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="notificationId"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduledNotificationDal.GetCarbonCopyEmailAddresses(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="disposalType"></param>
            <param name="disposalCenterNumber"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PAEEEM.DataAccessLayer.ScheduledNotificationDal.ClassInstance" -->
        <member name="T:PAEEEM.DataAccessLayer.ParameterHelper">
            <summary>
            SQL Connection Helper Class
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.ParameterHelper.strCon_DBLsWebApp">
            <summary>
            SQL Connection String 
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal">
            <summary>
            Credit Status
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Insert_CAT_ESTATUS_CREDITO(PAEEEM.Entities.CAT_ESTATUS_CREDITOModel)">
            <summary>
            Add Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Delete_CAT_ESTATUS_CREDITO(System.String)">
            <summary>
            Delete Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Update_CAT_ESTATUS_CREDITO(PAEEEM.Entities.CAT_ESTATUS_CREDITOModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Get_CAT_ESTATUS_CREDITOByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Get_CAT_ESTATUS_CREDITOCount(System.String,System.String)">
            <summary>
            Get Total Record Number
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Get_AllCAT_ESTATUS_CREDITO">
            <summary>
            Get all Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.Get_CAT_ESTATUS_CREDITOByEstatusName(System.String)">
            <summary>
            Get status with status name
            </summary>
            <param name="statusName"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_ESTATUS_CREDITODal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal">
            <summary>
            Provider
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Insert_CAT_PROVEEDOR(PAEEEM.Entities.CAT_PROVEEDORModel)">
            <summary>
            Add Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Delete_CAT_PROVEEDOR(System.String)">
            <summary>
            Delete Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Update_CAT_PROVEEDOR(PAEEEM.Entities.CAT_PROVEEDORModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Select_CAT_PROVEEDOR(PAEEEM.Entities.CAT_PROVEEDORModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Select_CAT_PROVEEDOR_RFC(PAEEEM.Entities.CAT_PROVEEDORModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Get_CAT_PROVEEDORByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Get_CAT_PROVEEDORByBranchID(System.String)">
            <summary>
            Get proveedor with proveedor branch
            </summary>
            <param name="BranchID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Get_CAT_PROVEEDORCount(System.String,System.String)">
            <summary>
            Get Total Record Number
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Get_AllCAT_PROVEEDOR">
            <summary>
            Get all Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.GetProveedorWithZone(System.Int32)">
            <summary>
            Get proveedores with zone
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.GetProveedorWithRegion(System.Int32)">
            <summary>
            Get proveedores with region
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.GetProveedor">
            <summary>
            Get proveedores
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.GetDisposalCenterRelatedSuppliers(System.Int32,System.String)">
            <summary>
            get all the suppliers and supplier branches assigned to a specific disposal
            </summary>
            <param name="DisposaID">disposal center</param>
            <param name="UserType">disposal center type: main center or branch</param>
            <returns>supplier/branches datatable</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Get_Provider(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get providers
            </summary>
            <param name="Zone"></param>
            <param name="Tipo"></param>
            <param name="Estatus"></param>
            <param name="Regional"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.GetSupplierByPk(System.Int32)">
            <summary>
            Get supplier
            </summary>
            <param name="supplierID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.GetSupplierAndBranch">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.Get_Provider_ForAuthorization(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Authorization supplier and branch
            </summary>
            <param name="Zone"></param>
            <param name="Tipo"></param>
            <param name="Estatus"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.UpdateProviderStatus(System.String,System.Int32)">
            <summary>
            Update Supplier Status
            </summary>
            <param name="ProductID"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_PROVEEDORDal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal">
            <summary>
            Technology
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Insert_CAT_TECNOLOGIA(PAEEEM.Entities.CAT_TECNOLOGIAModel)">
            <summary>
            Add Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Delete_CAT_TECNOLOGIA(System.String)">
            <summary>
            Delete Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Update_CAT_TECNOLOGIA(PAEEEM.Entities.CAT_TECNOLOGIAModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Get_CAT_TECNOLOGIAByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Get_CAT_TECNOLOGIACount(System.String,System.String)">
            <summary>
            Get Total Record Number
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Get_CAT_TECNOLOGIAListByPager(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Record With Split Page
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.Get_AllCAT_TECNOLOGIA">
            <summary>
            Get all Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CAT_PROVEEDOR_CAT_CENTRO_DISPDal">
            <summary>
            disposal center of assigned to supplier
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CAT_PROVEEDOR_CAT_CENTRO_DISPDal._classinstance">
            <summary>
            readonly class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CAT_PROVEEDOR_CAT_CENTRO_DISPDal.Insert_K_CAT_PROVEEDOR_CAT_CENTRO_DISP(PAEEEM.Entities.K_CAT_PROVEEDOR_CAT_CENTRO_DISPModel)">
            <summary>
            insert K_CAT_PROVEEDOR_CAT_CENTRO_DISP
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CAT_PROVEEDOR_CAT_CENTRO_DISPDal.GetDisposalRelatedSupplier(System.Int32,System.String,System.Int32)">
            <summary>
            get disposal of assigned to supplier
            </summary>
            <param name="SupplierID"></param>
            <param name="SupplierType"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CAT_PROVEEDOR_CAT_CENTRO_DISPDal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CENTRO_DISP_TECNOLOGIADAL">
            <summary>
            technologies of assigned to disposal
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CENTRO_DISP_TECNOLOGIADAL._classinstance">
            <summary>
            readonly class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CENTRO_DISP_TECNOLOGIADAL.Insert_K_CENTRO_DISP_TECNOLOGIA(PAEEEM.Entities.K_CENTRO_DISP_TECNOLOGIAModel)">
            <summary>
            insert K_CENTRO_DISP_TECNOLOGIA
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CENTRO_DISP_TECNOLOGIADAL.Delete_K_CENTRO_DISP_TECNOLOGIA(System.Int32,System.Int32,System.String)">
            <summary>
            Delete disposal center related disposal technology
            </summary>
            <param name="disposal">disposal center</param>
            <param name="technology">technology</param>
            <param name="type">disposal center type</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CENTRO_DISP_TECNOLOGIADAL.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.RegionalDal">
            <summary>
            Regional Data Access Layer For table CAT_REGION
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.RegionalDal._classinstance">
            <summary>
            readonly class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.RegionalDal.AddRegional(PAEEEM.Entities.RegionalEntity)">
            <summary>
            Add a new regional
            </summary>
            <param name="RegionalModel"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.RegionalDal.GetRegionals">
            <summary>
            Get regionals without any parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.RegionalDal.GetRegionalsByPK(System.Int32)">
            <summary>
            Get regionals with regionalID
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.RegionalDal.LogCreditCanceled(System.String,System.String,System.String)">
            <summary>
            Log Credit cancellation
            </summary>
            <param name="RegionalModel"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.RegionalDal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwise is false.</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQueryGetID(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute, and return id
            </summary>
            <param name="connectionString"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQueryGetID(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute and return id
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="SqlConnectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="SqlConnectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="SqlConnectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],PAEEEM.DataAccessLayer.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParameters used to execute the command</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTableTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTableTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteDataTableTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be cached</param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_AUXILIARDal">
            <summary>
            Data Access Layer for auxiliar
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_AUXILIARDal._classinstance">
            <summary>
            Class instance field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_AUXILIARDal.Update_CAT_AUXILIARByCredito(PAEEEM.Entities.CAT_AUXILIAREntity)">
            <summary>
            Update auxiliar with primary key
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_AUXILIARDal.Insert_CAT_AUXILIAR(PAEEEM.Entities.CAT_AUXILIAREntity)">
            <summary>
            Insert auxiliar record
            </summary>
            <param name="Instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_AUXILIARDal.Get_CAT_AUXILIARByCreditNo(System.String)">
            <summary>
            Get auxiliar with credit number
            </summary>
            <param name="strCreditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_AUXILIARDal.Update_CAT_AUXILIARByCreditoReview(PAEEEM.Entities.CAT_AUXILIAREntity)">
            <summary>
            Credit Review Update Cat_Auxiliar
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_AUXILIARDal.Delete_CatAuxilira(System.String)">
            <summary>
            Delete auxiliar with credit number
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_AUXILIARDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_CAPACIDAD_SUSTITUCIONDal">
            <summary>
            CAT_CAPACIDAD_SUSTITUCION data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CAPACIDAD_SUSTITUCIONDal.Get_CAT_CAPACIDAD_SUSTITUCIONByTechnology(System.Int32)">
            <summary>
            Get Record by Credit
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CAPACIDAD_SUSTITUCIONDal.Get_ALL_CAT_CAPACIDAD_SUSTITUCION">
            <summary>
            Get All Record
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CAPACIDAD_SUSTITUCIONDal.Get_CapacidaByTechnology(System.Int32)">
            <summary>
            Get Record by Credit
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_CAPACIDAD_SUSTITUCIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL">
            <summary>
            CAT_CENTRO_DISP data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.Get_All_CAT_CENTRO_DISPDAL(System.Int32)">
            <summary>
            Get All the TECNOLOGIA
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.Get_CAT_CENTRO_DISPByTECHNOLOGY(System.Int32,System.String,System.Int32)">
            <summary>
            Get All the TECNOLOGIA
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposals">
            <summary>
            Get disposal centers without any parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalsActive">
            <summary>
            Get active disposal centers without any parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposals(System.Int32)">
            <summary>
            Get disposal centers with zone
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalsByRegional(System.Int32)">
            <summary>
            Get disposal centers with regional
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalCenterAndBranch">
            <summary>
            get disposal center and branch
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalCenterAndBranchByUser(System.String,System.Int32)">
            <summary>
            get disposal center by user
            </summary>
            <param name="userType"></param>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalCenterNameByDisposalID(System.Int32)">
            <summary>
            Get Disposal Center name
            </summary>
            <param name="DisposalID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalCenterAndBranchWithZoneAndStatus(System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get main center and branches with region, zone, type, and status, by sort name, by pager
            </summary>
            <param name="regional"></param>
            <param name="zone"></param>
            <param name="type"></param>
            <param name="status"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalsByPk(System.Int32)">
            <summary>
            Get disposal centers with regional
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.Insert_MainDisposalCenter(PAEEEM.Entities.CAT_CENTRO_DISPModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.Update_MainDisposalCenter(PAEEEM.Entities.CAT_CENTRO_DISPModel)">
            <summary>
            Update disposal center
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.Select_MainDisposalCenter_RFC(PAEEEM.Entities.CAT_CENTRO_DISPModel)">
            <summary>
            Update disposal center
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.Select_MainDisposalCenter(PAEEEM.Entities.CAT_CENTRO_DISPModel)">
            <summary>
            Update disposal center
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.GetDisposalAndBranchWithZoneAndStatus(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Disposal Center And Branch for Authorization
            </summary>
            <param name="zone"></param>
            <param name="type"></param>
            <param name="status"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.UpdateDisposalStatus(System.String,System.Int32)">
            <summary>
            Active/Desactive/Cancel Disposal Center
            </summary>
            <param name="DiposalID"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_CENTRO_DISPDAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL">
            <summary>
            Disposal branches
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL._classinstance">
            <summary>
            readonly class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.GetDisposalBranches(System.Int32,System.Int32)">
            <summary>
            Get disposal center branches
            </summary>
            <param name="zone">zone parameter</param>
            <param name="DisposalID">disposal main center</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.GetDisposalByBranch(System.Int32)">
            <summary>
            Get supplier branch
            </summary>
            <param name="disposalBranchID">Supplier Branch ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.GetTechnologyByDisposal(System.String,System.Int32)">
            <summary>
            get technology with disposal or disposal branch
            </summary>
            <param name="userType"></param>
            <param name="disposal"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.GetDisposalCenterBranchNameByDisposalID(System.Int32)">
            <summary>
            
            </summary>
            <param name="DisposalID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.Insert_BranchDisposalCenter(PAEEEM.Entities.CAT_CENTRO_DISP_SUCURSALModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.Update_BranchDisposalCenter(PAEEEM.Entities.CAT_CENTRO_DISP_SUCURSALModel)">
            <summary>
            Update disposal center branch
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.Select_BranchDisposalCenter(PAEEEM.Entities.CAT_CENTRO_DISP_SUCURSALModel)">
            <summary>
            Select disposal center branch
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.GetDisposalBranchByDisposal(System.String)">
            <summary>
            get disposal branch by disposal
            </summary>
            <param name="disposal"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.UpdateDisposalBranchStatus(System.String,System.Int32)">
            <summary>
            Active/Desactive/Cancel Disposal Branch
            </summary>
            <param name="BranchID"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_CENTRO_DISP_SUCURSALDAL.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_DELEG_MUNICIPIODAL">
            <summary>
            CAT_DELEG_MUNICIPIO data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_DELEG_MUNICIPIODAL.Get_All_CAT_DELEG_MUNICIPIO">
            <summary>
            Get All the DELEG_MUNICIPIODAL
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_DELEG_MUNICIPIODAL.Get_CAT_DELEG_MUNICIPIOByEstado(System.Int32)">
            <summary>
            Get the DELEG_MUNICIPIODAL By Estado
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_DELEG_MUNICIPIODAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_FABRICANTEDal">
            <summary>
            Data Access Layer for fabricator
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_FABRICANTEDal.Get_All_CAT_FABRICANTE">
            <summary>
            Get all fabricator
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_FABRICANTEDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_IDENTIFICACIONDal">
            <summary>
            CAT_IDENTIFICACION data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_IDENTIFICACIONDal.Get_All_CAT_IDENTIFICACION">
            <summary>
            Get All CAT_IDENTIFICACION
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_IDENTIFICACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_MARCADal">
            <summary>
            Brand table
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_MARCADal._classinstance">
            <summary>
            Data Access Layer for fabricator
            </summary>  
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_CAT_MARCADal(System.String)">
            <summary>
            /Brand
            </summary>
            <param name="strProduct"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_MARCADal">
            <summary>
            Get all brands
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_TIPODal">
            <summary>
            Get all Tipo
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_TRANSFORMADORDal">
            <summary>
            Get all Transformador
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_TRANSFORM_FASEDal">
            <summary>
            Get all Fase del Transformador
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_TRANSFORM_MARCADal">
            <summary>
            Get all Marca del Transformador
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_TRANSFORM_RELACIONDal">
            <summary>
            Get all Relación de Transformación
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_APARTARRAYODal">
            <summary>
            Get all Apartarrayo
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_APARTARRAYO_MARCADal">
            <summary>
            Get all Marca del Apartarrayo
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_CORTACIRCUITODal">
            <summary>
            Get all Cortacircuito – Fusible
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_CORTACIRC_MARCADal">
            <summary>
            Get all Marca Cortacircuito – Fusible
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_INTERRUPTORDal">
            <summary>
            Get all Interruptor Termomagnético
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_INTERRUPTOR_MARCADal">
            <summary>
            Get all Marca Interruptor Termomagnético
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_CONDUCTORDal">
            <summary>
            Get all Conductor de Tierra
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_CONDUCTOR_MARCADal">
            <summary>
            Get all Marca Conductor de Tierra
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_COND_CONEXIONDal">
            <summary>
            Get all Conductor de Conexión a Centro de Carga
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_MARCADal.Get_ALL_CAT_SE_COND_CONEXION_MARCADal">
            <summary>
            Get all Marca Conductor de Conexión
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_MARCADal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_PERIODO_PAGODal">
            <summary>
            Data Access Layer for period pago
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_PERIODO_PAGODal._classinstance">
            <summary>
            Property field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PERIODO_PAGODal.Get_ALL_CAT_PERIODO_PAGO">
            <summary>
            Get all period pago
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_PERIODO_PAGODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_PRODUCTODal">
            <summary>
            Data Access Layer for product
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_PRODUCTODal._classinstance">
            <summary>
            Instance Field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Get_CAT_PRODUCTO_ByTechnology(System.String,System.String)">
            <summary>
            Get product with technology
            </summary>
            <param name="strTechnology"></param>
            <param name="strMarca"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Get_CAT_PRODUCTO_ByPK(System.String)">
            <summary>
            get Cat_Producto by pk
            </summary>
            <param name="strProductID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Get_CAT_PRODUCTO_BranchByPK(System.String)">
            <summary>
            Get proveedor branch with primary key
            </summary>
            <param name="strBranchID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Get_CAT_PRODUCTO_ByTechnologyAndProgram(System.String,System.String,System.String,System.String)">
            <summary>
            Get products with technology and program, brand and product type
            </summary>
            <param name="strTechnology">technology</param>
            <param name="strMarca">brand</param>
            <param name="strProgram">program</param>
            <param name="strTypeOfProduct">product type</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Get_CAT_PRODUCTO_ForSE_Description(System.String)">
            <summary>
            Get products for SE Description
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Get_CAT_PRODUCTO_ByTechnology_1(System.String,System.String,System.String)">
            <summary>
            Get product
            </summary>
            <param name="strTechnology"></param>
            <param name="strProvider"></param>
            <param name="strTypeProduct"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.GetProductsList(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Product list for Central Office Authorization
            </summary>
            <param name="Manufacture"></param>
            <param name="Technology"></param>
            <param name="TipoOfProduct"></param>
            <param name="Marca"></param>
            <param name="Estatus"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.UpdateProductStatus(System.String,System.Int32)">
            <summary>
            Active Products or Desactive Products or Cancel Products
            </summary>
            <param name="ProductID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.Insert_CAT_PRODUCTO(PAEEEM.Entities.CAT_PRODUCTOModel)">
            <summary>
            Add new product
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.UpdateProductSInformation(PAEEEM.Entities.CAT_PRODUCTOModel)">
            <summary>
            Update Product
            </summary>
            <param name="instance"></param>       
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_PRODUCTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_PROGRAMADal">
            <summary>
            Data Access Layer for program
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_PROGRAMADal._classinstance">
            <summary>
            Property field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.Get_All_CAT_PROGRAMAByPK(System.String)">
            <summary>
            Get program with program id
            </summary>
            <param name="strPk"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.get_Cat_Tarifa(System.String,System.String)">
            <summary>
            Validate rate
            </summary>
            <param name="ProgramID">Program</param>
            <param name="Rate">Rate</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.SubtractCurrentAmount(System.Int32,System.Decimal)">
            <summary>
            update the current amount of the program 
            </summary>
            <param name="ProgramID"></param>
            <param name="RequestAmount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.IncreaseCurrentAmount(System.Int32,System.Decimal)">
            <summary>
            update the current amount of the program 
            </summary>
            <param name="ProgramID"></param>
            <param name="RequestAmount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.Get_PROGRAMAByCreditNo(System.String)">
            <summary>
            get program with credit
            </summary>
            <param name="CreditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.GetPrograms">
            <summary>
            Get all defined programs in this system
            </summary>
            <returns>Programs</returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_PROGRAMADal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_REGIMEN_CONYUGALDal">
            <summary>
            CAT_REGIMEN_CONYUGALDal data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_REGIMEN_CONYUGALDal.Get_All_CAT_REGIMEN_CONYUGAL">
            <summary>
            Get All CAT_REGIMEN_CONYUGAL
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_REGIMEN_CONYUGALDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL">
            <summary>
            CAT_TECNOLOGIA data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_All_CAT_TECNOLOGIA">
            <summary>
            Get All the TECNOLOGIA
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_All_CAT_TECNOLOGIAByProgram(System.String)">
            <summary>
            Get Technology by ProgramID
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_CAT_TECNOLOGIAByProgramAndDisposal(System.Int32,System.Int32)">
            <summary>
            Get technology by program and disposal center
            </summary>
            <param name="Program"></param>
            <param name="Disposal"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_All_CAT_TECNOLOGIATipoByPK(System.String)">
            <summary>
            Get technology by id
            </summary>
            <param name="strTechnologyID">technology id</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_All_CAT_TECNOLOGIAByProgramAndProductID(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get Technology by ProgramID and productID
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.GetTechnologyWithProgramandDisposalCenter(System.String,System.Int32,System.String)">
            <summary>
               //Get Technology by ProgramID and DisposalID
            </summary>
            <param name="program">program</param>
            <param name="disposalCenter">disposal center id</param>
            <param name="disposalCenterType">disposal center type: main center or branch</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_CAT_TECNOLOGIAByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_Material_TechnologyByProgram(System.String)">
            <summary>
            get technology by program and material
            </summary>
            <param name="strProgram"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_ALL_Material_Technology">
            <summary>
            get all technology of material
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.Get_ALL_Material_Technology_Provider">
            <summary>
            get all technology of material
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.GetDisposalCenterRelatedTechnology(System.Int32,System.String)">
            <summary>
            Get disposal center related technologies
            </summary>
            <param name="disposalCenter">disposal center id</param>
            <param name="disposalCenterType">disposal center type</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TECNOLOGIADAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TIPO_ACREDITACIONDal">
            <summary>
            Data Access Layer for accreditation type
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.CAT_TIPO_ACREDITACIONDal._classinstance">
            <summary>
            Class Instance field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TIPO_ACREDITACIONDal.Get_All_CAT_TIPO_ACREDITACION">
            <summary>
            Get All CAT_TIPO_ACREDITACION
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TIPO_ACREDITACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TIPO_INDUSTRIADal">
            <summary>
            CAT_TIPO_INDUSTRIADal data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TIPO_INDUSTRIADal.Get_All_CAT_TIPO_INDUSTRIA">
            <summary>
            Get All CAT_TIPO_INDUSTRIA//get activity type of the enterprise
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TIPO_INDUSTRIADal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TIPO_PRODUCTODal">
            <summary>
            Product type
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TIPO_PRODUCTODal.Get_CAT_TIPO_PRODUCTOByTechnology(System.String)">
            <summary>
            Get All CAT_TIPO_INDUSTRIA//get activity type of the enterprise
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TIPO_PRODUCTODal.Get_CAT_TIPO_PRODUCTOByPk(System.String)">
            <summary>
            Get product type
            </summary>
            <param name="strPk">product type id</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TIPO_PRODUCTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TIPO_PROPIEDADDal">
            <summary>
            Data Access Layer for propiedad type
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TIPO_PROPIEDADDal.Get_All_CAT_TIPO_PROPIEDAD">
            <summary>
            Get all propiedad types
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TIPO_PROPIEDADDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.CAT_TIPO_SOCIEDADDal">
            <summary>
            Data Access Layer for sociedad type
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.CAT_TIPO_SOCIEDADDal.Get_All_CAT_TIPO_SOCIEDAD">
            <summary>
            Get all sociedad types
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.CAT_TIPO_SOCIEDADDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CREDITODal">
            <summary>
            Credit Data Access Layer used to manipulate K_CREDITO table
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CREDITODal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.AddCredit(PAEEEM.Entities.CreditEntity)">
            <summary>
            Add credit
            </summary>
            <param name="CreditModel">Credit Model Object</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.updateCreditAccountFilter(PAEEEM.Entities.CreditEntity)">
            <summary>
            update No_Ahorro_Energetico No_Ahorro_Economico Mt_Capacidad_Pago
            </summary>
            <param name="creditModel"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.UpdateCredit(PAEEEM.Entities.CreditEntity)">
            <summary>
            Update credit with credit entity
            </summary>
            <param name="CreditModel">Credit Entity</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.CancelCredit(System.String,System.Int32,System.DateTime,System.String,System.DateTime,System.String)">
            <summary>
            Cancel the credits with pending status for some days
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="cancelDate">Cancel Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.CancelCredit(System.String,System.String)">
            <summary>
            Cancel the credits with pending status for some days
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="cancelDate">Cancel Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.EnRevisionCredit(System.String,System.Int32,System.DateTime,System.String,System.DateTime)">
            <summary>
            En revision credit
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="enRevisionDate">En Revision Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.AprobarCredit(System.String,System.Int32,System.DateTime,System.String,System.DateTime)">
            <summary>
            Aprobar credit
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="aprovarDate">Aprovar Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.RechazarCredit(System.String,System.Int32,System.DateTime,System.String,System.DateTime)">
            <summary>
            Rechazar credit
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="rechazarDate">Rechazar Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.PendienteCredit(System.String,System.Int32,System.DateTime,System.String,System.DateTime)">
            <summary>
            Pendiente credit
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="pendienteDate">Pendiente Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.CalificacionMopNoValidCredit(System.String,System.Int32,System.DateTime,System.String,System.DateTime)">
            <summary>
            Calificación Mop No Valid Credit
            </summary>
            <param name="creditNumber">Credit Number</param>
            <param name="statusID">Status ID</param>
            <param name="NoValidDate">Invalid Date</param>
            <param name="updateUser">Update User Name</param>
            <param name="userDate">User Date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCredits(System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get credits with where clause
            </summary>
            <param name="proveedor">Proveedor ID</param>
            <param name="userType">Credit Created User Type</param>
            <param name="pendingDate">pending status date</param>
            <param name="creditStatus">Credit Status</param>
            <param name="razonSocial">Razón Social Name</param>
            <param name="technology">Technology</param>
            <param name="sortName">Sort name</param>
            <param name="pageIndex">Page Index</param>
            <param name="pageSize">Page Size</param>
            <param name="pageCount">page Count</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCredits(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get credits without where clause
            </summary>
            <param name="proveedor">Proveedor ID</param>
            <param name="userType">Credit Created User Type</param>
            <param name="sortName">Sort Column</param>
            <param name="pageIndex">page Index</param>
            <param name="pageSize">Page Size</param>
            <param name="pageCount">page Count</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCredits(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get credits for authorization
            </summary>
            <param name="role">Role Type</param>
            <param name="filter">Filter Condition</param>
            <param name="sortName">Sort Name</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCredits(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get credits for authorization with filter conditions
            </summary>
            <param name="role">Role Type</param>
            <param name="filter">Filter Condition</param>
            <param name="proveedor">Proveedor</param>
            <param name="proveedorBranch">Proveedor Branches</param>
            <param name="creditStatus">Credit Status</param>
            <param name="technology">Technology</param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCredits(System.String)">
            <summary>
            Get credits several fields by pk
            </summary>
            <param name="CreditNumber">Credit Number</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetRazonSocial(System.Int32,System.String)">
            <summary>
            Get razón social without parameters
            </summary>
            <param name="proveedorId">Proveedor ID</param>
            <param name="userType">user Type</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetPendienteDate(System.Int32,System.String)">
            <summary>
            Get pendiente date
            </summary>
            <param name="proveedorId">Proveedor ID</param>
            <param name="userType">user Type</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditsReview(System.String)">
            <summary>
            Get credit with credit number
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.UpdateCreditApproveInfo(PAEEEM.Entities.CreditEntity)">
            <summary>
            Update credit by regional or supplier
            </summary>
            <param name="CreditModel"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.Select_Max_No_Credit">
            <summary>
            Get max credit number
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.CalculateTotalEnergyConsumptionSavings(System.String)">
            <summary>
            Calculate the total energy consumption savings for all selected products
            </summary>
            <param name="ProductID">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.UpdateCreditReview(PAEEEM.Entities.CreditEntity)">
            <summary>
            Update Credit and Credit_Product
            </summary>
            <param name="CreditModel"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.IsServiceCodeExist(System.String)">
            <summary>
            Check if service code exist
            </summary>
            <param name="servicecode"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.Get_CreditRequestForDisposal(System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get credit requests
            </summary>
            <param name="DisposalID">disposal center</param>
            <param name="userType">disposal center type:main or branch</param>
            <param name="ProviderID">provider</param>
            <param name="ProviderType">provider type: main or branch</param>
            <param name="TechnologyID">technology</param>
            <param name="sortName">sort name</param>
            <param name="pageIndex">page index</param>
            <param name="pageSize">page size</param>
            <param name="pageCount">page count</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditsBarCodeByNoCredit(System.String)">
            <summary>
            Get barcode with the credit number
            </summary>
            <param name="CreditNumber">Credit Number</param>
            <returns>Barcode String</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditsNoByBarCode(System.String)">
            <summary>
            Get credit by credit barcode
            </summary>
            <param name="CreditNumber"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.IsCreditInValidStatus(System.String)">
            <summary>
            Check if the entered credit request is in valid status
            </summary>
            <param name="creditNumber">credit number</param>
            <returns>record count</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditByProgramAndDisposal(System.String,System.String,System.String)">
            <summary>
            get credit
            </summary>
            <param name="program"></param>
            <param name="DisposalID"></param>
            <param name="DisposalType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditsByProgramAndDisposalAndTechnologyAndSupplierForDisableOldProduct(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Get credits with program and disposal and technology and supplier
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="supplierId"></param>
            <param name="supplierType"></param>
            <param name="disposalId"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditsWithTechnologyAndMaterialAndProgramAndSupplier(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Get Credits with technology and material and program and supplier
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="material"></param>
            <param name="order"></param>
            <param name="supplierId"></param>
            <param name="supplierType"></param>
            <param name="disposalId"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GetCreditByProgramAndDisposalAndSupplierAndTechnology(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="program"></param>
            <param name="DisposalID"></param>
            <param name="DisposalType"></param>
            <param name="Supplier"></param>
            <param name="SupplierType"></param>
            <param name="Technology"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.TotalAmountByRFC(System.String)">
            <summary>
            Check if the entered credit request is in valid status
            </summary>
            <param name="creditNumber">credit number</param>
            <returns>record count</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GenerateRFCMoral(System.String,System.String,System.String)">
            <summary>
            Generates de "RFC" from the moral person's company name and registry date 
            the "homoclave" cannot be generated, it will use the first 2 chars from 
            the one provided and add a recalculated "digito verificador"
            if a full RFC is provided, the sp will strip uneeded chars
            </summary>
            <param name="companyName">Nombre de la Empresa</param>
            <param name="registryDate"></param>
            <param name="homoclave">Homoclave (Full RFC, or homoclave with or without digito verificador)</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITODal.GenerateRFCInmoral(System.String,System.String,System.String,System.String)">
            <summary>
            Generates de RFC from the first, last and mother names and date of birth of the person
            the homoclave is also created including the "digito verificador"
            </summary>
            <param name="firstName">Nombres</param>
            <param name="lastName">Apellido Paterno</param>
            <param name="motherName">Apellido Materno</param>
            <param name="birthDate">Fecha de nacimiento</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITODal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CREDITO_AMORTIZACIONDal">
            <summary>
            Credit amortizacion table
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CREDITO_AMORTIZACIONDal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_AMORTIZACIONDal.Insert_K_CREDITO_AMORTIZACION(System.String,System.Data.DataTable)">
            <summary>
            Add credit amortizacion record
            </summary>
            <param name="creditNo"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_AMORTIZACIONDal.Dalete_K_CREDITO_AMORTIZACION(System.String)">
            <summary>
            Delete credit amortizacion record
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_AMORTIZACIONDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal">
            <summary>
            Data Access Layer for credit cost
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal.Insert_K_Credito_Costo(PAEEEM.Entities.K_CREDITO_COSTOEntity)">
            <summary>
            insert data
            </summary>
            <param name="Instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal.Update_K_Credito_Costo(PAEEEM.Entities.K_CREDITO_COSTOEntity)">
            <summary>
            update K_Credito_Costo
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal.Delete_K_Credito_Costo(System.String)">
            <summary>
            delete k_credito_costo
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal.GetTotalCost(System.String)">
            <summary>
            Get total cost by credit number
            </summary>
            <param name="credit"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_COSTODal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal">
            <summary>
            Data Access Layer for credit related discount
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal.Insert_K_CREDITO_DESCUENTO(PAEEEM.Entities.K_CREDITO_DESCUENTOEntity)">
            <summary>
            Insert data
            </summary>
            <param name="Instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal.Update_K_CREDITO_DESCUENTO(PAEEEM.Entities.K_CREDITO_DESCUENTOEntity)">
            <summary>
            Update credit discount
            </summary>
            <param name="Instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal.Delete_K_CREDITO_DESCUENTO(System.String)">
            <summary>
            delete K_CREDITO_DESCUENTO
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal.GetTotalDescount(System.String)">
            <summary>
            Get total discount
            </summary>
            <param name="credit"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_DESCUENTODal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal">
            <summary>
            Data Access Layer for credit related product
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal.Insert_K_CREDITO_PRODUCTO(PAEEEM.Entities.K_CREDITO_PRODUCTOEntity)">
            <summary>
            Insert data
            </summary>
            <param name="Instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal.get_K_Credit_ProductByCreditNo(System.String)">
            <summary>
            get by Credit_No
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal.Dalete_K_CREDITO_PRODUCTO(System.String)">
            <summary>
            
            </summary>
            <param name="creditNo"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal.get_All_RequestTechnologyByCredit(System.String,System.Int32)">
            <summary>
            get all the technology of the requested product
            </summary>
            <param name="creditNo"></param>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal.get_RequestTechnologyAmountByCredit(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="creditNo"></param>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_PRODUCTODal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL">
            <summary>
            K_CREDITO_SUSTITUCION data access lay
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Insert_K_CREDITO_SUSTITUCION(PAEEEM.Entities.K_CREDITO_SUSTITUCIONModel)">
            <summary>
            Add K_CREDITO_SUSTITUCION
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Get_K_CREDITO_SUSTITUCIONByNo_Credito(System.String)">
            <summary>
            Get Record by Credit
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Update_K_CREDITO_SUSTITUCION(PAEEEM.Entities.K_CREDITO_SUSTITUCIONModel)">
            <summary>
            Update K_CREDITO_SUSTITUCION
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Get_K_CREDITO_SUSTITUCIONByCreditoAndTechnology(System.String,System.Int32)">
            <summary>
            get records by credit and technology
            </summary>
            <param name="No_Credito"></param>
            <param name="Technology"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Delete_K_CREDITO_SUSTITUCIONByCredit(System.String)">
            <summary>
            delete records by credit
            </summary>
            <param name="Credit"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetReceiptDate">
            <summary>
            Get receipt date
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetDisposedProducts(System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            get products by disposal,receipt date and technology
            </summary>
            <param name="Disposal"></param>
            <param name="DisposalType"></param>
            <param name="ReceiptDate"></param>
            <param name="Technology"></param>
            <param name="Estatus"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetProductCountByCreditBarCode(System.String)">
            <summary>
            Get K_CREDITO_SUSTITUCION By Barcode
            </summary>
            <param name="BarCode"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetProductByCreditBarCode(System.String)">
            <summary>
            
            </summary>
            <param name="BarCode"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpdateK_CREDITO_SUSTITUCION(System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="barcode"></param>
            <param name="ReceiptDate"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Get_K_CREDITO_SUSTITUCIONForDisposal(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="BarCode"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetRecordCount(System.String,System.Int32,System.String)">
             <summary>
            Check if the credit request is related with a specific disposal center
             </summary>
             <param name="barcode">Barcode String</param>
             <param name="disposalCenterNumber">Disposal Center Number</param>
             <param name="disposalCenterType">Disposal Center Type</param>
             <returns>Record Count</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Update_K_Credit_SustitucionToParaInhabilitación(System.String,System.String,System.Int32,System.String)">
            <summary>
            Update credit substitution old product to inhabilitación
            </summary>
            <param name="NoCredit"></param>
            <param name="ProductCode"></param>
            <param name="Flag"></param>
            <param name="Technology"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.Get_All_K_CREDITO_SUSTITUCIONByCreditoAndTechnology(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="No_Credito"></param>
            <param name="Technology"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpdateK_CREDITO_SUSTITUCIONEstatusToInhabilitado(System.String,System.Int32,System.DateTime)">
            <summary>
            change status to Inhabilitado
            </summary>
            <param name="Credit"></param>
            <param name="Technology"></param>
            <param name="InhabilitadoDate"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpdateK_CREDITO_SUSTITUCIONEstatusToRecuperacion(System.String,System.Int32,System.DateTime)">
            <summary>
            change status to RECUPERACION DE RESIDUOS
            </summary>
            <param name="Credit"></param>
            <param name="Technology"></param>
            <param name="RecuperacionDate"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetCompleteProducts(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            get complete products
            </summary>
            <param name="Disposal"></param>
            <param name="DisposalType"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetOldEquipmentsReceivedList(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get received old products by the scanned barcode
            </summary>
            <param name="barCode">barcode string</param>
            <param name="disposalCenterNumber">disposal center number</param>
            <param name="disposalCenterType">disposal center type</param>
            <param name="pageIndex">page index</param>
            <param name="pageSize">page size</param>
            <param name="pageCount">page count</param>
            <returns>old products list</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetReceivedOldProductsInternalCodeByFilter(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="credit"></param>
            <param name="Supplier"></param>
            <param name="SupplierType"></param>
            <param name="Technology"></param>
            <param name="Program"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetReceivedProducts(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get received products
            </summary>
            <param name="program">program</param>
            <param name="credit">credit</param>
            <param name="internalCode">old product code</param>
            <param name="supplierId">supplier</param>
            <param name="supplierType">supplier type: main or branch</param>
            <param name="type">type</param>
            <param name="technology">technology</param>
            <param name="fromDate">from date</param>
            <param name="toDate">to date</param>
            <param name="disposalCenterId">disposal center</param>
            <param name="disposalCenterType">disposal center type</param>
            <param name="sortName">sort name</param>
            <param name="pageIndex">page index</param>
            <param name="pageSize">page size</param>
            <param name="pageCount">page count</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.IsOldProductReceived(System.String)">
            <summary>
            check the Old equipment is reception
            </summary>
            <param name="CreditSusID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.IsOldProductCharactersRequired(System.String)">
            <summary>
            check the Old equipment is reception
            </summary>
            <param name="CreditSusID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetOldEquipmentByID(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pkId"></param>
            <param name="DisposalID"></param>
            <param name="DisposalFg"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetNoCreditByCreditSusID(System.String)">
            <summary>
            get credit number by substitution id
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpdateCreditSustitutionByNoCredit(System.String,System.String,System.DateTime)">
            <summary>
            Change status to conformidad for each old products related with current credit request
            </summary>
            <param name="NoCredit">credit number</param>
            <param name="FgComfirm">conformidad value</param>
            <param name="ReceiptionDate">received date</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpdateCreditSustutionByModel(PAEEEM.Entities.K_CREDITO_SUSTITUCIONModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetFiloIDByDisposalAndTechnology(System.String,System.String,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="disposalID"></param>
            <param name="UserType"></param>
            <param name="TechnologyID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetRecoveryProducts(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="program"></param>
            <param name="credit"></param>
            <param name="internalCode"></param>
            <param name="supplierID"></param>
            <param name="supplierType"></param>
            <param name="technology"></param>
            <param name="receiptFromDate"></param>
            <param name="receiptToDate"></param>
            <param name="inhabilitacionFromDate"></param>
            <param name="inhabilitacionToDate"></param>
            <param name="material"></param>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetRecoveryProducts(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            material recovery
            </summary>
            <param name="program"></param>
            <param name="credit"></param>
            <param name="internalCode"></param>
            <param name="supplierID"></param>
            <param name="supplierType"></param>
            <param name="technology"></param>
            <param name="receiptFromDate"></param>
            <param name="receiptToDate"></param>
            <param name="inhabilitacionFromDate"></param>
            <param name="inhabilitacionToDate"></param>
            <param name="material"></param>
            <param name="order"></param>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetGasRecoveryProducts(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.String,System.String)">
            <summary>
            gas recovery
            </summary>
            <param name="program"></param>
            <param name="credit"></param>
            <param name="internalCode"></param>
            <param name="supplierID"></param>
            <param name="supplierType"></param>
            <param name="technology"></param>
            <param name="receiptFromDate"></param>
            <param name="receiptToDate"></param>
            <param name="inhabilitacionFromDate"></param>
            <param name="inhabilitacionToDate"></param>
            <param name="material"></param>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <param name="sortName"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetRecoveryProductsForImage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Upload image for receive old equipment
            </summary>
            <param name="program"></param>
            <param name="credit"></param>
            <param name="internalCode"></param>
            <param name="supplierID"></param>
            <param name="SupplierType"></param>
            <param name="ImageType"></param>
            <param name="technology"></param>
            <param name="receiptFromDate"></param>
            <param name="receiptToDate"></param>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpLoadImageForReceiveOldEquipment(PAEEEM.Entities.K_CREDITO_SUSTITUCIONModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetFirstReceiptDate">
            <summary>
            get first date of old equipment reception registry 
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetRecoveryProductsForSupervision(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Supervision Date Registry  data
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="receiptFromDate"></param>
            <param name="receiptToDate"></param>
            <param name="UserID"></param>
            <param name="UserType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetInHabilitacionProductsForImage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get inhabilitación products without images
            </summary>
            <param name="program">program</param>
            <param name="credit">credit id</param>
            <param name="internalCode">old product internal code</param>
            <param name="supplierID">supplier id</param>
            <param name="SupplierType">supplier type</param>
            <param name="ImageType">image type</param>
            <param name="technology">technology</param>
            <param name="receiptFromDate">old product reception date from</param>
            <param name="receiptToDate">old product reception date to</param>
            <param name="disposalID">disposal center id</param>
            <param name="disposalType">disposal center type</param>
            <param name="InFromDate">old product inhabilitación date from</param>
            <param name="InToDate">old product Approval date to</param>
            <param name="pageIndex">page index</param>
            <param name="pageSize">page size</param>
            <param name="pageCount">page count</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.UpLoadImageForInHabilitacionOldEquipment(PAEEEM.Entities.K_CREDITO_SUSTITUCIONModel)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetRecoveryProductsForSupervisionView(System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Old Equipment By DisposalID and DisposalType for Review
            </summary>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="receiptFromDate"></param>
            <param name="receiptToDate"></param>
            <param name="UserID"></param>
            <param name="UserType"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="pageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetReceivedOldProductsInternalCodeForMaterialRegistry(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Get received old product internal code for material registry
            </summary>
            <param name="credit"></param>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="material"></param>
            <param name="order"></param>
            <param name="supplierId"></param>
            <param name="supplierType"></param>
            <param name="disposalId"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetDisableOldProductByProgramAndDisposalAndTechnologyAndSupplier(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="credit"></param>
            <param name="program"></param>
            <param name="technology"></param>
            <param name="supplierId"></param>
            <param name="supplierType"></param>
            <param name="disposalId"></param>
            <param name="disposalType"></param>
            <param name="registry"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetCountDtFeachReciveptionIsnull(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="disposalID"></param>
            <param name="UserType"></param>
            <param name="NoCredit"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetCountDtFeachReciveptionIsnull_Supplier(System.String)">
            getting the status for the supplier if the credit is already in the CAYD
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetOldEquipmentInfoByID(System.String)">
            <summary>
            old equipment information by pk
            </summary>
            <param name="pkId"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetEquipmentNotRegistryAllMeterialBeforeTimeLine(System.Int32,System.String)">
            <summary>
            get equipment not registry all material before timeline
            </summary>
            <param name="disposalID"></param>
            <param name="disposalType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.IsAllowReceiptOldEquipment(System.Int32,System.String)">
            <summary>
            get equipment not disable before time line
            </summary>
            <param name="disposalID"></param>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetOldestReceivedProductsWithoutImage(System.String,System.Int32,System.String)">
            <summary>
            Get received products
            </summary>
            <param name="program">program</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.GetOldestInHabilitacionProductsWithoutImage(System.String,System.Int32,System.String)">
            <summary>
            Get received products
            </summary>
            <param name="program">program</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCIONDAL.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_SUSTITUCION_EXTENSIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_CREDITO_TEMPDAL._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_CREDITO_TEMPDAL.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_PROGRAMA_COSTODal">
            <summary>
            Data Access Layer for program related cost
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROGRAMA_COSTODal.Get_All_K_PROGRAMA_COSTO(System.String)">
            <summary>
            Get program related cost
            </summary>
            <param name="strPk"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_PROGRAMA_COSTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_PROGRAMA_DESCUENTODal">
            <summary>
            Data Access Layer for program discount
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.K_PROGRAMA_DESCUENTODal._classinstance">
            <summary>
            Class instance field
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROGRAMA_DESCUENTODal.Get_All_K_PROGRAMA_DESCUENTO(System.String)">
            <summary>
            Get program related discount
            </summary>
            <param name="strPk"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_PROGRAMA_DESCUENTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal">
            <summary>
            Data Access Layer for proveedor related products
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal.Get_K_PROVEEDOR_PRODUCTO_ByPK(System.String,System.String)">
            <summary>
            Get proveedor with primary key
            </summary>
            <param name="strProductId"></param>
            <param name="strProviderID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal.Update_K_PROVEEDOR_PRODUCTO(PAEEEM.Entities.K_PROVEEDOR_PRODUCTOEntity)">
            <summary>
            Update provider products
            </summary>
            <param name="Provider_Product">proveedor products</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal.Get_K_PROVEEDOR_PRODUCTO_ByProviderID(System.Int32)">
            <summary>
            Get proveedor
            </summary>
            <param name="ProviderID">program</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal.Insert_K_PROVEEDOR_PRODUCTO(PAEEEM.Entities.K_PROVEEDOR_PRODUCTOEntity)">
            <summary>
            add record
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal.Delete_K_PROVEEDOR_PRODUCTO(System.Int32,System.String)">
            <summary>
            delete record
            </summary>
            <param name="supplierId"></param>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.K_PROVEEDOR_PRODUCTODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.ProductCapacityDal">
            <summary>
            Data Access Layer For Product Capacity
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.ProductCapacityDal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ProductCapacityDal.Get_ProductCapacity(System.String)">
            <summary>
            Get product capacity
            </summary>
            <param name="strTechnologyID">technology</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.ProductCapacityDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.ScheduleJobsDal">
            <summary>
            Process Logic for job schedule
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.ScheduleJobsDal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduleJobsDal.AddScheduleJob(PAEEEM.Entities.ScheduleJobEntity)">
            <summary>
            Add new schedule job
            </summary>
            <param name="JobModel"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduleJobsDal.ProcessScheduleJob(System.String)">
            <summary>
            Process schedule job
            </summary>
            <param name="CreditNum"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduleJobsDal.CanceledScheduleJob(System.String,System.String)">
            <summary>
            Cancel schedule job
            </summary>
            <param name="CreditNum"></param>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduleJobsDal.GetScheduleJobsWithDateandStatus(System.String)">
            <summary>
            Get scheduled jobs
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.ScheduleJobsDal.GetScheduleJobsWithCanceled(System.String)">
            <summary>
            Get schedule jobs for cancel process
            </summary>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.ScheduleJobsDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.SupplierBrancheDal">
            <summary>
            Supplier branches
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.SupplierBrancheDal._classinstance">
            <summary>
            readonly class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.GetSupplierBranches(System.Int32,System.Int32)">
            <summary>
            Get supplier branches with supplier and zone
            </summary>
            <param name="SupplierID">Supplier Id</param>
            <param name="zoneID">Zone ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.GetSupplierBranch(System.Int32)">
            <summary>
            Get supplier branch
            </summary>
            <param name="supplierBranchID">Supplier Branch ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.GetSupplierBranchWithSupplier(System.Int32)">
            <summary>
            Get supplier branch
            </summary>
            <param name="supplierID">Supplier ID</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.GetSupplierBranch(System.Int32,System.Int32)">
            <summary>
            Get supplier branches with supplier and zone
            </summary>
            <param name="proveedor"></param>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.GetSupplierBranchesWithRegion(System.Int32,System.Int32)">
            <summary>
            Get supplier branches with region
            </summary>
            <param name="region"></param>
            <param name="proveedor"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.GetProveedor(System.Int32)">
            <summary>
            Get supplier branches
            </summary>
            <param name="branch"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.Insert_CAT_PROVEEDORBRANCH(PAEEEM.Entities.SupplierBranchModel)">
            <summary>
            Add Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.Update_CAT_PROVEEDOR(PAEEEM.Entities.SupplierBranchModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.UpdateProviderBranchStatus(System.String,System.Int32)">
            <summary>
            Update Supplier Branch status
            </summary>
            <param name="BranchID"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierBrancheDal.Select_CAT_PROVEEDOR(PAEEEM.Entities.SupplierBranchModel)">
            <summary>
            Select Supplier Branch status
            </summary>
            <param name="BranchID"></param>
            <param name="Status"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.SupplierBrancheDal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.SupplierDal">
            <summary>
            Supplier Data Access Layer For Table CAT_PROVEEDOR
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.SupplierDal._classinstance">
            <summary>
            readonly class instance
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierDal.GetSuppliers(System.Int32)">
            <summary>
            Get suppliers with zone parameter
            </summary>
            <param name="zone">zone</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.SupplierDal.GetRegionSuppliers(System.Int32)">
            <summary>
            Get suppliers with region parameter
            </summary>
            <param name="region">region</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.SupplierDal.ClassInstance">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.TechnologyTypeDal">
            <summary>
            Data Access Layer For Technology Type
            </summary>
        </member>
        <member name="F:PAEEEM.DataAccessLayer.TechnologyTypeDal._classInstance">
            <summary>
            Readonly variable for class instance
            </summary>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.TechnologyTypeDal.ClassInstance">
            <summary>
            Property for class instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.US_NAVEGACIONDal">
            <summary>
            navigation DAL
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Insert_US_NAVEGACION(PAEEEM.Entities.US_NAVEGACIONModel)">
            <summary>
            Add navigation
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Delete_US_NAVEGACION(System.String)">
            <summary>
            Delete navigation
            </summary>
            <param name="pkid"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Update_US_NAVEGACION(PAEEEM.Entities.US_NAVEGACIONModel)">
            <summary>
            Update navigation
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_US_NAVEGACIONByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_US_NAVEGACIONCount(System.String,System.String)">
            <summary>
            Get Total Record Number
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_US_NAVEGACIONListByPager(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Record With Split Page
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_AllUS_NAVEGACION">
            <summary>
            Get All navigations
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_RoleNavigationRootByRoleID(System.Int32)">
            <summary>
            Get navigations by role
            </summary>
            <param name="roleID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_RoleNavigationByRoleID(System.Int32,System.String)">
            <summary>
            get navigations by role and root value
            </summary>
            <param name="roleID"></param>
            <param name="rootValue"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.Get_URLNavigationByRoleID(System.Int32,System.String)">
            <summary>
            Get url by role
            </summary>
            <param name="roleID"></param>
            <param name="rootValue"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.GetChildrenNavListByParentCode(System.Int32)">
            <summary>
            Get child nodes by parent node
            </summary>
            <param name="navID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.ExistChildrenNode(System.String)">
            <summary>
            Check if child node exist
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.US_NAVEGACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.US_OPERACIONDal">
            <summary>
            Operation Permission Data Access Layer
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Insert_US_OPERACION(PAEEEM.Entities.US_OPERACIONModel)">
            <summary>
            Add Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Delete_US_OPERACION(System.String)">
            <summary>
            Delete Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Update_US_OPERACION(PAEEEM.Entities.US_OPERACIONModel)">
            <summary>
            Update Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Get_US_OPERACIONByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Get_US_OPERACIONCount(System.String,System.String)">
            <summary>
            Get Total Record Number
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Get_US_OPERACIONListByPager(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Record With Split Page
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Get_AllUS_OPERACION">
            <summary>
            Get all Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_OPERACIONDal.Get_OperationPermissionByNavCode(System.String)">
            <summary>
            Get permissions by navigation code
            </summary>
            <param name="navID"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.US_OPERACIONDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.US_PERMISODal">
            <summary>
            Permission DAL
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Insert_US_PERMISO(PAEEEM.Entities.US_PERMISOModel)">
            <summary>
            Add permission
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Delete_US_PERMISO(System.String)">
            <summary>
            Delete permission
            </summary>
            <param name="pkid"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Update_US_PERMISO(PAEEEM.Entities.US_PERMISOModel)">
            <summary>
            Update permission
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_US_PERMISOByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_US_PERMISOListByPager(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get Record With Split Page
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_AllUS_PERMISO">
            <summary>
            Get all permissions
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_AllPagePermission">
            <summary>
            Get all permissions
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_RootPermission">
            <summary>
            Get root permission
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_AllPermissionByParentID(System.String)">
            <summary>
            Get permissions by root
            </summary>
            <param name="parentID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Delete_Permission(System.String,System.String)">
            <summary>
            Delete permission
            </summary>
            <param name="navID"></param>
            <param name="pertype"></param>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_RolePagePermissionByRoleID(System.Int32)">
            <summary>
            Get page permissions by role
            </summary>
            <param name="roleID"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_PERMISODal.Get_RoleOperationPermissionByRoleID(System.Int32)">
            <summary>
            Get operation permissions by role
            </summary>
            <param name="roleID"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.US_PERMISODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.US_ROLDal">
            <summary>
            Role DAL
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.Insert_US_ROL(PAEEEM.Entities.US_ROLModel)">
            <summary>
            Add new role to Role table
            </summary>
            <param name="instance">Role Model</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.Update_US_ROL(PAEEEM.Entities.US_ROLModel)">
            <summary>
            Update role
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.Get_US_ROLByPKID(System.String)">
            <summary>
            Get role by id
            </summary>
            <param name="pkid"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.Get_AllUS_ROL">
            <summary>
            Get all roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.Get_US_ROLListByPager(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get roles by pager
            </summary>
            <param name="sorder"></param>
            <param name="currentPageIndex"></param>
            <param name="pageSize"></param>
            <param name="pagecount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Build role entity
            </summary>
            <param name="sdr"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROLDal.Update_RoleRelation(PAEEEM.Entities.US_ROLModel)">
            <summary>
            Update role relation
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.US_ROLDal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.US_ROL_PERMISODal">
            <summary>
            Role Permission Relation
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Insert_US_ROL_PERMISO(PAEEEM.Entities.US_ROL_PERMISOModel)">
            <summary>
            Add role-permission
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Delete_US_ROL_PERMISO(System.String)">
            <summary>
            Delete role permission relation
            </summary>
            <param name="pkid"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Update_US_ROL_PERMISO(PAEEEM.Entities.US_ROL_PERMISOModel)">
            <summary>
            Update role-permission relation
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Get_US_ROL_PERMISOByPKID(System.String)">
            <summary>
            Get Record By Primary Key
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Get_AllUS_ROL_PERMISO">
            <summary>
            Get all Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            evaluate model
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Get_PermissionByNavCode(System.String)">
            <summary>
            Get permissions by navigation code
            </summary>
            <param name="navCode"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.Delete_Role_PermissionByRoleID(System.Int32)">
            <summary>
            Delete role_permission
            </summary>
            <param name="roleID"></param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.US_ROL_PERMISODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
        <member name="T:PAEEEM.DataAccessLayer.US_USUARIODal">
            <summary>
            User Dal
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Insert_US_USUARIO(PAEEEM.Entities.US_USUARIOModel)">
            <summary>
            Add record to User table
            </summary>
            <param name="instance">User Entity</param>
            <returns>int: success-1, failure-0</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Delete_US_USUARIO(System.String)">
            <summary>
            Delete exist user by user id
            </summary>
            <param name="pkid">int user id</param>
            <returns>return value: type: int; success-1; failure-0</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Update_US_USUARIO(PAEEEM.Entities.US_USUARIOModel)">
            <summary>
            Update user
            </summary>
            <param name="instance">user entity</param>
            <returns>return type:int; success-1; failure-0</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Get_AllUS_USUARIO">
            <summary>
            Get all Record
            </summary>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Get_US_USUARIOByPKID(System.String)">
            <summary>
            get user by id
            </summary>
            <param name="pkid">id</param>
            <returns>user model</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Get_US_USUARIOListByPager(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get users by pager size
            </summary>
            <param name="sorder">Sort BY</param>
            <param name="currentPageIndex">Current Page Index</param>
            <param name="pageSize">Page Size</param>
            <param name="pagecount">Total Page Count</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.EvaluateModel(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Build user entity
            </summary>
            <param name="sdr">SqlDataReader</param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.AuthenticationUser(PAEEEM.Entities.US_USUARIOModel)">
            <summary>
            Authenticate user
            </summary>
            <param name="user">user model</param>
            <returns>int 1- success, 0-failure</returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.ValidationUserName(System.String,System.String@,System.String@)">
            <summary>
            Validate user name exists
            </summary>
            <param name="username"></param>
            <param name="address"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.IsUserNameExist(System.String)">
            <summary>
            Validate user email no duplicate
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.UpdatePassword(PAEEEM.Entities.US_USUARIOModel)">
            <summary>
            Update password
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.Get_UserByUserName(System.String)">
            <summary>
            get user by name
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.GetUsersByUserType(System.Collections.Generic.List{System.String},System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            get users with role
            </summary>
            <param name="ListTypes"></param>
            <param name="SortBy"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.GetUsersWithRegionalRole(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            get users with regional
            </summary>
            <param name="regional"></param>
            <param name="SortBy"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.GetUsersWithZoneRole(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get users with zone role
            </summary>
            <param name="zone"></param>
            <param name="SortBy"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <param name="PageCount"></param>
            <returns></returns>
        </member>
        <member name="M:PAEEEM.DataAccessLayer.US_USUARIODal.ActivateUser(System.String)">
            <summary>
            Activate user with user id
            </summary>
            <param name="UserID">User Id</param>
            <returns></returns>
        </member>
        <member name="P:PAEEEM.DataAccessLayer.US_USUARIODal.ClassInstance">
            <summary>
            Class Instance
            </summary>
        </member>
    </members>
</doc>
