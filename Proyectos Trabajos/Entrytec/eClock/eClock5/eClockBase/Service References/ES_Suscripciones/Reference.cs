//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eClockBase.ES_Suscripciones {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ES_Suscripciones.S_Suscripciones")]
    public interface S_Suscripciones {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/DoWork", ReplyAction="urn:S_Suscripciones/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/AgregaSuscripcion", ReplyAction="urn:S_Suscripciones/AgregaSuscripcionResponse")]
        System.IAsyncResult BeginAgregaSuscripcion(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndAgregaSuscripcion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/ModificaSuscripcion", ReplyAction="urn:S_Suscripciones/ModificaSuscripcionResponse")]
        System.IAsyncResult BeginModificaSuscripcion(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndModificaSuscripcion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/BorraSuscripcion", ReplyAction="urn:S_Suscripciones/BorraSuscripcionResponse")]
        System.IAsyncResult BeginBorraSuscripcion(string SesionSeguridad, int SuscripcionId, System.AsyncCallback callback, object asyncState);
        
        bool EndBorraSuscripcion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/CreaSuscripcion", ReplyAction="urn:S_Suscripciones/CreaSuscripcionResponse")]
        System.IAsyncResult BeginCreaSuscripcion(string SesionSeguridad, string SuscripcionNombre, string SuscripcionContacto, string SuscripcionContactoEmail, System.AsyncCallback callback, object asyncState);
        
        int EndCreaSuscripcion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/ObtenSuscripcionID", ReplyAction="urn:S_Suscripciones/ObtenSuscripcionIDResponse")]
        System.IAsyncResult BeginObtenSuscripcionID(string Suscripcion, System.AsyncCallback callback, object asyncState);
        
        int EndObtenSuscripcionID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Suscripciones/ObtenSuscripcionUrl", ReplyAction="urn:S_Suscripciones/ObtenSuscripcionUrlResponse")]
        System.IAsyncResult BeginObtenSuscripcionUrl(string Suscripcion, System.AsyncCallback callback, object asyncState);
        
        string EndObtenSuscripcionUrl(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface S_SuscripcionesChannel : eClockBase.ES_Suscripciones.S_Suscripciones, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgregaSuscripcionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AgregaSuscripcionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModificaSuscripcionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModificaSuscripcionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BorraSuscripcionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BorraSuscripcionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreaSuscripcionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreaSuscripcionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObtenSuscripcionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ObtenSuscripcionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObtenSuscripcionUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ObtenSuscripcionUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class S_SuscripcionesClient : System.ServiceModel.ClientBase<eClockBase.ES_Suscripciones.S_Suscripciones>, eClockBase.ES_Suscripciones.S_Suscripciones {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginAgregaSuscripcionDelegate;
        
        private EndOperationDelegate onEndAgregaSuscripcionDelegate;
        
        private System.Threading.SendOrPostCallback onAgregaSuscripcionCompletedDelegate;
        
        private BeginOperationDelegate onBeginModificaSuscripcionDelegate;
        
        private EndOperationDelegate onEndModificaSuscripcionDelegate;
        
        private System.Threading.SendOrPostCallback onModificaSuscripcionCompletedDelegate;
        
        private BeginOperationDelegate onBeginBorraSuscripcionDelegate;
        
        private EndOperationDelegate onEndBorraSuscripcionDelegate;
        
        private System.Threading.SendOrPostCallback onBorraSuscripcionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreaSuscripcionDelegate;
        
        private EndOperationDelegate onEndCreaSuscripcionDelegate;
        
        private System.Threading.SendOrPostCallback onCreaSuscripcionCompletedDelegate;
        
        private BeginOperationDelegate onBeginObtenSuscripcionIDDelegate;
        
        private EndOperationDelegate onEndObtenSuscripcionIDDelegate;
        
        private System.Threading.SendOrPostCallback onObtenSuscripcionIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginObtenSuscripcionUrlDelegate;
        
        private EndOperationDelegate onEndObtenSuscripcionUrlDelegate;
        
        private System.Threading.SendOrPostCallback onObtenSuscripcionUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public S_SuscripcionesClient() : 
                base(S_SuscripcionesClient.GetDefaultBinding(), S_SuscripcionesClient.GetDefaultEndpointAddress()) {
        }
        
        public S_SuscripcionesClient(EndpointConfiguration endpointConfiguration) : 
                base(S_SuscripcionesClient.GetBindingForEndpoint(endpointConfiguration), S_SuscripcionesClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public S_SuscripcionesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(S_SuscripcionesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public S_SuscripcionesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(S_SuscripcionesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public S_SuscripcionesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<AgregaSuscripcionCompletedEventArgs> AgregaSuscripcionCompleted;
        
        public event System.EventHandler<ModificaSuscripcionCompletedEventArgs> ModificaSuscripcionCompleted;
        
        public event System.EventHandler<BorraSuscripcionCompletedEventArgs> BorraSuscripcionCompleted;
        
        public event System.EventHandler<CreaSuscripcionCompletedEventArgs> CreaSuscripcionCompleted;
        
        public event System.EventHandler<ObtenSuscripcionIDCompletedEventArgs> ObtenSuscripcionIDCompleted;
        
        public event System.EventHandler<ObtenSuscripcionUrlCompletedEventArgs> ObtenSuscripcionUrlCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void eClockBase.ES_Suscripciones.S_Suscripciones.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginAgregaSuscripcion(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginAgregaSuscripcion(SesionSeguridad, SuscripcionNombre, SuscripcionBorrado, SuscripPrecioId, SuscripcionRazon, SuscripcionRfc, SuscripcionDireccion1, SuscripcionDireccion2, SuscripcionCiudad, SuscripcionEstado, SuscripcionPais, EdoSuscripcionId, SuscripcionFacturar, SuscripcionContratacion, SuscripcionEmpleados, SuscripcionTerminales, SuscripcionUsuarios, SuscripcionAlumnos, SuscripcionVisitantes, SuscripcionAdicionales, SuscripcionOtros, SuscripcionMensual, SuscripDatosFinal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool eClockBase.ES_Suscripciones.S_Suscripciones.EndAgregaSuscripcion(System.IAsyncResult result) {
            return base.Channel.EndAgregaSuscripcion(result);
        }
        
        private System.IAsyncResult OnBeginAgregaSuscripcion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            string SuscripcionNombre = ((string)(inValues[1]));
            bool SuscripcionBorrado = ((bool)(inValues[2]));
            int SuscripPrecioId = ((int)(inValues[3]));
            string SuscripcionRazon = ((string)(inValues[4]));
            string SuscripcionRfc = ((string)(inValues[5]));
            string SuscripcionDireccion1 = ((string)(inValues[6]));
            string SuscripcionDireccion2 = ((string)(inValues[7]));
            string SuscripcionCiudad = ((string)(inValues[8]));
            string SuscripcionEstado = ((string)(inValues[9]));
            string SuscripcionPais = ((string)(inValues[10]));
            int EdoSuscripcionId = ((int)(inValues[11]));
            bool SuscripcionFacturar = ((bool)(inValues[12]));
            System.DateTime SuscripcionContratacion = ((System.DateTime)(inValues[13]));
            int SuscripcionEmpleados = ((int)(inValues[14]));
            int SuscripcionTerminales = ((int)(inValues[15]));
            int SuscripcionUsuarios = ((int)(inValues[16]));
            int SuscripcionAlumnos = ((int)(inValues[17]));
            int SuscripcionVisitantes = ((int)(inValues[18]));
            bool SuscripcionAdicionales = ((bool)(inValues[19]));
            string SuscripcionOtros = ((string)(inValues[20]));
            int SuscripcionMensual = ((int)(inValues[21]));
            System.DateTime SuscripDatosFinal = ((System.DateTime)(inValues[22]));
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginAgregaSuscripcion(SesionSeguridad, SuscripcionNombre, SuscripcionBorrado, SuscripPrecioId, SuscripcionRazon, SuscripcionRfc, SuscripcionDireccion1, SuscripcionDireccion2, SuscripcionCiudad, SuscripcionEstado, SuscripcionPais, EdoSuscripcionId, SuscripcionFacturar, SuscripcionContratacion, SuscripcionEmpleados, SuscripcionTerminales, SuscripcionUsuarios, SuscripcionAlumnos, SuscripcionVisitantes, SuscripcionAdicionales, SuscripcionOtros, SuscripcionMensual, SuscripDatosFinal, callback, asyncState);
        }
        
        private object[] OnEndAgregaSuscripcion(System.IAsyncResult result) {
            bool retVal = ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndAgregaSuscripcion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAgregaSuscripcionCompleted(object state) {
            if ((this.AgregaSuscripcionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AgregaSuscripcionCompleted(this, new AgregaSuscripcionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AgregaSuscripcionAsync(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal) {
            this.AgregaSuscripcionAsync(SesionSeguridad, SuscripcionNombre, SuscripcionBorrado, SuscripPrecioId, SuscripcionRazon, SuscripcionRfc, SuscripcionDireccion1, SuscripcionDireccion2, SuscripcionCiudad, SuscripcionEstado, SuscripcionPais, EdoSuscripcionId, SuscripcionFacturar, SuscripcionContratacion, SuscripcionEmpleados, SuscripcionTerminales, SuscripcionUsuarios, SuscripcionAlumnos, SuscripcionVisitantes, SuscripcionAdicionales, SuscripcionOtros, SuscripcionMensual, SuscripDatosFinal, null);
        }
        
        public void AgregaSuscripcionAsync(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal, 
                    object userState) {
            if ((this.onBeginAgregaSuscripcionDelegate == null)) {
                this.onBeginAgregaSuscripcionDelegate = new BeginOperationDelegate(this.OnBeginAgregaSuscripcion);
            }
            if ((this.onEndAgregaSuscripcionDelegate == null)) {
                this.onEndAgregaSuscripcionDelegate = new EndOperationDelegate(this.OnEndAgregaSuscripcion);
            }
            if ((this.onAgregaSuscripcionCompletedDelegate == null)) {
                this.onAgregaSuscripcionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAgregaSuscripcionCompleted);
            }
            base.InvokeAsync(this.onBeginAgregaSuscripcionDelegate, new object[] {
                        SesionSeguridad,
                        SuscripcionNombre,
                        SuscripcionBorrado,
                        SuscripPrecioId,
                        SuscripcionRazon,
                        SuscripcionRfc,
                        SuscripcionDireccion1,
                        SuscripcionDireccion2,
                        SuscripcionCiudad,
                        SuscripcionEstado,
                        SuscripcionPais,
                        EdoSuscripcionId,
                        SuscripcionFacturar,
                        SuscripcionContratacion,
                        SuscripcionEmpleados,
                        SuscripcionTerminales,
                        SuscripcionUsuarios,
                        SuscripcionAlumnos,
                        SuscripcionVisitantes,
                        SuscripcionAdicionales,
                        SuscripcionOtros,
                        SuscripcionMensual,
                        SuscripDatosFinal}, this.onEndAgregaSuscripcionDelegate, this.onAgregaSuscripcionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginModificaSuscripcion(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginModificaSuscripcion(SesionSeguridad, SuscripcionNombre, SuscripcionBorrado, SuscripPrecioId, SuscripcionRazon, SuscripcionRfc, SuscripcionDireccion1, SuscripcionDireccion2, SuscripcionCiudad, SuscripcionEstado, SuscripcionPais, EdoSuscripcionId, SuscripcionFacturar, SuscripcionContratacion, SuscripcionEmpleados, SuscripcionTerminales, SuscripcionUsuarios, SuscripcionAlumnos, SuscripcionVisitantes, SuscripcionAdicionales, SuscripcionOtros, SuscripcionMensual, SuscripDatosFinal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool eClockBase.ES_Suscripciones.S_Suscripciones.EndModificaSuscripcion(System.IAsyncResult result) {
            return base.Channel.EndModificaSuscripcion(result);
        }
        
        private System.IAsyncResult OnBeginModificaSuscripcion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            string SuscripcionNombre = ((string)(inValues[1]));
            bool SuscripcionBorrado = ((bool)(inValues[2]));
            int SuscripPrecioId = ((int)(inValues[3]));
            string SuscripcionRazon = ((string)(inValues[4]));
            string SuscripcionRfc = ((string)(inValues[5]));
            string SuscripcionDireccion1 = ((string)(inValues[6]));
            string SuscripcionDireccion2 = ((string)(inValues[7]));
            string SuscripcionCiudad = ((string)(inValues[8]));
            string SuscripcionEstado = ((string)(inValues[9]));
            string SuscripcionPais = ((string)(inValues[10]));
            int EdoSuscripcionId = ((int)(inValues[11]));
            bool SuscripcionFacturar = ((bool)(inValues[12]));
            System.DateTime SuscripcionContratacion = ((System.DateTime)(inValues[13]));
            int SuscripcionEmpleados = ((int)(inValues[14]));
            int SuscripcionTerminales = ((int)(inValues[15]));
            int SuscripcionUsuarios = ((int)(inValues[16]));
            int SuscripcionAlumnos = ((int)(inValues[17]));
            int SuscripcionVisitantes = ((int)(inValues[18]));
            bool SuscripcionAdicionales = ((bool)(inValues[19]));
            string SuscripcionOtros = ((string)(inValues[20]));
            int SuscripcionMensual = ((int)(inValues[21]));
            System.DateTime SuscripDatosFinal = ((System.DateTime)(inValues[22]));
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginModificaSuscripcion(SesionSeguridad, SuscripcionNombre, SuscripcionBorrado, SuscripPrecioId, SuscripcionRazon, SuscripcionRfc, SuscripcionDireccion1, SuscripcionDireccion2, SuscripcionCiudad, SuscripcionEstado, SuscripcionPais, EdoSuscripcionId, SuscripcionFacturar, SuscripcionContratacion, SuscripcionEmpleados, SuscripcionTerminales, SuscripcionUsuarios, SuscripcionAlumnos, SuscripcionVisitantes, SuscripcionAdicionales, SuscripcionOtros, SuscripcionMensual, SuscripDatosFinal, callback, asyncState);
        }
        
        private object[] OnEndModificaSuscripcion(System.IAsyncResult result) {
            bool retVal = ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndModificaSuscripcion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnModificaSuscripcionCompleted(object state) {
            if ((this.ModificaSuscripcionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModificaSuscripcionCompleted(this, new ModificaSuscripcionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModificaSuscripcionAsync(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal) {
            this.ModificaSuscripcionAsync(SesionSeguridad, SuscripcionNombre, SuscripcionBorrado, SuscripPrecioId, SuscripcionRazon, SuscripcionRfc, SuscripcionDireccion1, SuscripcionDireccion2, SuscripcionCiudad, SuscripcionEstado, SuscripcionPais, EdoSuscripcionId, SuscripcionFacturar, SuscripcionContratacion, SuscripcionEmpleados, SuscripcionTerminales, SuscripcionUsuarios, SuscripcionAlumnos, SuscripcionVisitantes, SuscripcionAdicionales, SuscripcionOtros, SuscripcionMensual, SuscripDatosFinal, null);
        }
        
        public void ModificaSuscripcionAsync(
                    string SesionSeguridad, 
                    string SuscripcionNombre, 
                    bool SuscripcionBorrado, 
                    int SuscripPrecioId, 
                    string SuscripcionRazon, 
                    string SuscripcionRfc, 
                    string SuscripcionDireccion1, 
                    string SuscripcionDireccion2, 
                    string SuscripcionCiudad, 
                    string SuscripcionEstado, 
                    string SuscripcionPais, 
                    int EdoSuscripcionId, 
                    bool SuscripcionFacturar, 
                    System.DateTime SuscripcionContratacion, 
                    int SuscripcionEmpleados, 
                    int SuscripcionTerminales, 
                    int SuscripcionUsuarios, 
                    int SuscripcionAlumnos, 
                    int SuscripcionVisitantes, 
                    bool SuscripcionAdicionales, 
                    string SuscripcionOtros, 
                    int SuscripcionMensual, 
                    System.DateTime SuscripDatosFinal, 
                    object userState) {
            if ((this.onBeginModificaSuscripcionDelegate == null)) {
                this.onBeginModificaSuscripcionDelegate = new BeginOperationDelegate(this.OnBeginModificaSuscripcion);
            }
            if ((this.onEndModificaSuscripcionDelegate == null)) {
                this.onEndModificaSuscripcionDelegate = new EndOperationDelegate(this.OnEndModificaSuscripcion);
            }
            if ((this.onModificaSuscripcionCompletedDelegate == null)) {
                this.onModificaSuscripcionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModificaSuscripcionCompleted);
            }
            base.InvokeAsync(this.onBeginModificaSuscripcionDelegate, new object[] {
                        SesionSeguridad,
                        SuscripcionNombre,
                        SuscripcionBorrado,
                        SuscripPrecioId,
                        SuscripcionRazon,
                        SuscripcionRfc,
                        SuscripcionDireccion1,
                        SuscripcionDireccion2,
                        SuscripcionCiudad,
                        SuscripcionEstado,
                        SuscripcionPais,
                        EdoSuscripcionId,
                        SuscripcionFacturar,
                        SuscripcionContratacion,
                        SuscripcionEmpleados,
                        SuscripcionTerminales,
                        SuscripcionUsuarios,
                        SuscripcionAlumnos,
                        SuscripcionVisitantes,
                        SuscripcionAdicionales,
                        SuscripcionOtros,
                        SuscripcionMensual,
                        SuscripDatosFinal}, this.onEndModificaSuscripcionDelegate, this.onModificaSuscripcionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginBorraSuscripcion(string SesionSeguridad, int SuscripcionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBorraSuscripcion(SesionSeguridad, SuscripcionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool eClockBase.ES_Suscripciones.S_Suscripciones.EndBorraSuscripcion(System.IAsyncResult result) {
            return base.Channel.EndBorraSuscripcion(result);
        }
        
        private System.IAsyncResult OnBeginBorraSuscripcion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            int SuscripcionId = ((int)(inValues[1]));
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginBorraSuscripcion(SesionSeguridad, SuscripcionId, callback, asyncState);
        }
        
        private object[] OnEndBorraSuscripcion(System.IAsyncResult result) {
            bool retVal = ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndBorraSuscripcion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBorraSuscripcionCompleted(object state) {
            if ((this.BorraSuscripcionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BorraSuscripcionCompleted(this, new BorraSuscripcionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BorraSuscripcionAsync(string SesionSeguridad, int SuscripcionId) {
            this.BorraSuscripcionAsync(SesionSeguridad, SuscripcionId, null);
        }
        
        public void BorraSuscripcionAsync(string SesionSeguridad, int SuscripcionId, object userState) {
            if ((this.onBeginBorraSuscripcionDelegate == null)) {
                this.onBeginBorraSuscripcionDelegate = new BeginOperationDelegate(this.OnBeginBorraSuscripcion);
            }
            if ((this.onEndBorraSuscripcionDelegate == null)) {
                this.onEndBorraSuscripcionDelegate = new EndOperationDelegate(this.OnEndBorraSuscripcion);
            }
            if ((this.onBorraSuscripcionCompletedDelegate == null)) {
                this.onBorraSuscripcionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBorraSuscripcionCompleted);
            }
            base.InvokeAsync(this.onBeginBorraSuscripcionDelegate, new object[] {
                        SesionSeguridad,
                        SuscripcionId}, this.onEndBorraSuscripcionDelegate, this.onBorraSuscripcionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginCreaSuscripcion(string SesionSeguridad, string SuscripcionNombre, string SuscripcionContacto, string SuscripcionContactoEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreaSuscripcion(SesionSeguridad, SuscripcionNombre, SuscripcionContacto, SuscripcionContactoEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int eClockBase.ES_Suscripciones.S_Suscripciones.EndCreaSuscripcion(System.IAsyncResult result) {
            return base.Channel.EndCreaSuscripcion(result);
        }
        
        private System.IAsyncResult OnBeginCreaSuscripcion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            string SuscripcionNombre = ((string)(inValues[1]));
            string SuscripcionContacto = ((string)(inValues[2]));
            string SuscripcionContactoEmail = ((string)(inValues[3]));
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginCreaSuscripcion(SesionSeguridad, SuscripcionNombre, SuscripcionContacto, SuscripcionContactoEmail, callback, asyncState);
        }
        
        private object[] OnEndCreaSuscripcion(System.IAsyncResult result) {
            int retVal = ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndCreaSuscripcion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreaSuscripcionCompleted(object state) {
            if ((this.CreaSuscripcionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreaSuscripcionCompleted(this, new CreaSuscripcionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreaSuscripcionAsync(string SesionSeguridad, string SuscripcionNombre, string SuscripcionContacto, string SuscripcionContactoEmail) {
            this.CreaSuscripcionAsync(SesionSeguridad, SuscripcionNombre, SuscripcionContacto, SuscripcionContactoEmail, null);
        }
        
        public void CreaSuscripcionAsync(string SesionSeguridad, string SuscripcionNombre, string SuscripcionContacto, string SuscripcionContactoEmail, object userState) {
            if ((this.onBeginCreaSuscripcionDelegate == null)) {
                this.onBeginCreaSuscripcionDelegate = new BeginOperationDelegate(this.OnBeginCreaSuscripcion);
            }
            if ((this.onEndCreaSuscripcionDelegate == null)) {
                this.onEndCreaSuscripcionDelegate = new EndOperationDelegate(this.OnEndCreaSuscripcion);
            }
            if ((this.onCreaSuscripcionCompletedDelegate == null)) {
                this.onCreaSuscripcionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreaSuscripcionCompleted);
            }
            base.InvokeAsync(this.onBeginCreaSuscripcionDelegate, new object[] {
                        SesionSeguridad,
                        SuscripcionNombre,
                        SuscripcionContacto,
                        SuscripcionContactoEmail}, this.onEndCreaSuscripcionDelegate, this.onCreaSuscripcionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginObtenSuscripcionID(string Suscripcion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginObtenSuscripcionID(Suscripcion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int eClockBase.ES_Suscripciones.S_Suscripciones.EndObtenSuscripcionID(System.IAsyncResult result) {
            return base.Channel.EndObtenSuscripcionID(result);
        }
        
        private System.IAsyncResult OnBeginObtenSuscripcionID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Suscripcion = ((string)(inValues[0]));
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginObtenSuscripcionID(Suscripcion, callback, asyncState);
        }
        
        private object[] OnEndObtenSuscripcionID(System.IAsyncResult result) {
            int retVal = ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndObtenSuscripcionID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnObtenSuscripcionIDCompleted(object state) {
            if ((this.ObtenSuscripcionIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ObtenSuscripcionIDCompleted(this, new ObtenSuscripcionIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ObtenSuscripcionIDAsync(string Suscripcion) {
            this.ObtenSuscripcionIDAsync(Suscripcion, null);
        }
        
        public void ObtenSuscripcionIDAsync(string Suscripcion, object userState) {
            if ((this.onBeginObtenSuscripcionIDDelegate == null)) {
                this.onBeginObtenSuscripcionIDDelegate = new BeginOperationDelegate(this.OnBeginObtenSuscripcionID);
            }
            if ((this.onEndObtenSuscripcionIDDelegate == null)) {
                this.onEndObtenSuscripcionIDDelegate = new EndOperationDelegate(this.OnEndObtenSuscripcionID);
            }
            if ((this.onObtenSuscripcionIDCompletedDelegate == null)) {
                this.onObtenSuscripcionIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnObtenSuscripcionIDCompleted);
            }
            base.InvokeAsync(this.onBeginObtenSuscripcionIDDelegate, new object[] {
                        Suscripcion}, this.onEndObtenSuscripcionIDDelegate, this.onObtenSuscripcionIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Suscripciones.S_Suscripciones.BeginObtenSuscripcionUrl(string Suscripcion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginObtenSuscripcionUrl(Suscripcion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string eClockBase.ES_Suscripciones.S_Suscripciones.EndObtenSuscripcionUrl(System.IAsyncResult result) {
            return base.Channel.EndObtenSuscripcionUrl(result);
        }
        
        private System.IAsyncResult OnBeginObtenSuscripcionUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Suscripcion = ((string)(inValues[0]));
            return ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).BeginObtenSuscripcionUrl(Suscripcion, callback, asyncState);
        }
        
        private object[] OnEndObtenSuscripcionUrl(System.IAsyncResult result) {
            string retVal = ((eClockBase.ES_Suscripciones.S_Suscripciones)(this)).EndObtenSuscripcionUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnObtenSuscripcionUrlCompleted(object state) {
            if ((this.ObtenSuscripcionUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ObtenSuscripcionUrlCompleted(this, new ObtenSuscripcionUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ObtenSuscripcionUrlAsync(string Suscripcion) {
            this.ObtenSuscripcionUrlAsync(Suscripcion, null);
        }
        
        public void ObtenSuscripcionUrlAsync(string Suscripcion, object userState) {
            if ((this.onBeginObtenSuscripcionUrlDelegate == null)) {
                this.onBeginObtenSuscripcionUrlDelegate = new BeginOperationDelegate(this.OnBeginObtenSuscripcionUrl);
            }
            if ((this.onEndObtenSuscripcionUrlDelegate == null)) {
                this.onEndObtenSuscripcionUrlDelegate = new EndOperationDelegate(this.OnEndObtenSuscripcionUrl);
            }
            if ((this.onObtenSuscripcionUrlCompletedDelegate == null)) {
                this.onObtenSuscripcionUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnObtenSuscripcionUrlCompleted);
            }
            base.InvokeAsync(this.onBeginObtenSuscripcionUrlDelegate, new object[] {
                        Suscripcion}, this.onEndObtenSuscripcionUrlDelegate, this.onObtenSuscripcionUrlCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override eClockBase.ES_Suscripciones.S_Suscripciones CreateChannel() {
            return new S_SuscripcionesClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_S_Suscripciones)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_S_Suscripciones)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:50723/S_Suscripciones.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return S_SuscripcionesClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_S_Suscripciones);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return S_SuscripcionesClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_S_Suscripciones);
        }
        
        private class S_SuscripcionesClientChannel : ChannelBase<eClockBase.ES_Suscripciones.S_Suscripciones>, eClockBase.ES_Suscripciones.S_Suscripciones {
            
            public S_SuscripcionesClientChannel(System.ServiceModel.ClientBase<eClockBase.ES_Suscripciones.S_Suscripciones> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginAgregaSuscripcion(
                        string SesionSeguridad, 
                        string SuscripcionNombre, 
                        bool SuscripcionBorrado, 
                        int SuscripPrecioId, 
                        string SuscripcionRazon, 
                        string SuscripcionRfc, 
                        string SuscripcionDireccion1, 
                        string SuscripcionDireccion2, 
                        string SuscripcionCiudad, 
                        string SuscripcionEstado, 
                        string SuscripcionPais, 
                        int EdoSuscripcionId, 
                        bool SuscripcionFacturar, 
                        System.DateTime SuscripcionContratacion, 
                        int SuscripcionEmpleados, 
                        int SuscripcionTerminales, 
                        int SuscripcionUsuarios, 
                        int SuscripcionAlumnos, 
                        int SuscripcionVisitantes, 
                        bool SuscripcionAdicionales, 
                        string SuscripcionOtros, 
                        int SuscripcionMensual, 
                        System.DateTime SuscripDatosFinal, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[23];
                _args[0] = SesionSeguridad;
                _args[1] = SuscripcionNombre;
                _args[2] = SuscripcionBorrado;
                _args[3] = SuscripPrecioId;
                _args[4] = SuscripcionRazon;
                _args[5] = SuscripcionRfc;
                _args[6] = SuscripcionDireccion1;
                _args[7] = SuscripcionDireccion2;
                _args[8] = SuscripcionCiudad;
                _args[9] = SuscripcionEstado;
                _args[10] = SuscripcionPais;
                _args[11] = EdoSuscripcionId;
                _args[12] = SuscripcionFacturar;
                _args[13] = SuscripcionContratacion;
                _args[14] = SuscripcionEmpleados;
                _args[15] = SuscripcionTerminales;
                _args[16] = SuscripcionUsuarios;
                _args[17] = SuscripcionAlumnos;
                _args[18] = SuscripcionVisitantes;
                _args[19] = SuscripcionAdicionales;
                _args[20] = SuscripcionOtros;
                _args[21] = SuscripcionMensual;
                _args[22] = SuscripDatosFinal;
                System.IAsyncResult _result = base.BeginInvoke("AgregaSuscripcion", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAgregaSuscripcion(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AgregaSuscripcion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginModificaSuscripcion(
                        string SesionSeguridad, 
                        string SuscripcionNombre, 
                        bool SuscripcionBorrado, 
                        int SuscripPrecioId, 
                        string SuscripcionRazon, 
                        string SuscripcionRfc, 
                        string SuscripcionDireccion1, 
                        string SuscripcionDireccion2, 
                        string SuscripcionCiudad, 
                        string SuscripcionEstado, 
                        string SuscripcionPais, 
                        int EdoSuscripcionId, 
                        bool SuscripcionFacturar, 
                        System.DateTime SuscripcionContratacion, 
                        int SuscripcionEmpleados, 
                        int SuscripcionTerminales, 
                        int SuscripcionUsuarios, 
                        int SuscripcionAlumnos, 
                        int SuscripcionVisitantes, 
                        bool SuscripcionAdicionales, 
                        string SuscripcionOtros, 
                        int SuscripcionMensual, 
                        System.DateTime SuscripDatosFinal, 
                        System.AsyncCallback callback, 
                        object asyncState) {
                object[] _args = new object[23];
                _args[0] = SesionSeguridad;
                _args[1] = SuscripcionNombre;
                _args[2] = SuscripcionBorrado;
                _args[3] = SuscripPrecioId;
                _args[4] = SuscripcionRazon;
                _args[5] = SuscripcionRfc;
                _args[6] = SuscripcionDireccion1;
                _args[7] = SuscripcionDireccion2;
                _args[8] = SuscripcionCiudad;
                _args[9] = SuscripcionEstado;
                _args[10] = SuscripcionPais;
                _args[11] = EdoSuscripcionId;
                _args[12] = SuscripcionFacturar;
                _args[13] = SuscripcionContratacion;
                _args[14] = SuscripcionEmpleados;
                _args[15] = SuscripcionTerminales;
                _args[16] = SuscripcionUsuarios;
                _args[17] = SuscripcionAlumnos;
                _args[18] = SuscripcionVisitantes;
                _args[19] = SuscripcionAdicionales;
                _args[20] = SuscripcionOtros;
                _args[21] = SuscripcionMensual;
                _args[22] = SuscripDatosFinal;
                System.IAsyncResult _result = base.BeginInvoke("ModificaSuscripcion", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndModificaSuscripcion(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ModificaSuscripcion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBorraSuscripcion(string SesionSeguridad, int SuscripcionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SesionSeguridad;
                _args[1] = SuscripcionId;
                System.IAsyncResult _result = base.BeginInvoke("BorraSuscripcion", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndBorraSuscripcion(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("BorraSuscripcion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreaSuscripcion(string SesionSeguridad, string SuscripcionNombre, string SuscripcionContacto, string SuscripcionContactoEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = SesionSeguridad;
                _args[1] = SuscripcionNombre;
                _args[2] = SuscripcionContacto;
                _args[3] = SuscripcionContactoEmail;
                System.IAsyncResult _result = base.BeginInvoke("CreaSuscripcion", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCreaSuscripcion(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CreaSuscripcion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginObtenSuscripcionID(string Suscripcion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Suscripcion;
                System.IAsyncResult _result = base.BeginInvoke("ObtenSuscripcionID", _args, callback, asyncState);
                return _result;
            }
            
            public int EndObtenSuscripcionID(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("ObtenSuscripcionID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginObtenSuscripcionUrl(string Suscripcion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Suscripcion;
                System.IAsyncResult _result = base.BeginInvoke("ObtenSuscripcionUrl", _args, callback, asyncState);
                return _result;
            }
            
            public string EndObtenSuscripcionUrl(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ObtenSuscripcionUrl", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_S_Suscripciones,
        }
    }
}
