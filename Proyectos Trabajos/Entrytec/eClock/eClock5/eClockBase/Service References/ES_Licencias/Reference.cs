//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eClockBase.ES_Licencias {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ES_Licencias.S_Licencias")]
    public interface S_Licencias {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Licencias/CreaLicencia", ReplyAction="urn:S_Licencias/CreaLicenciaResponse")]
        System.IAsyncResult BeginCreaLicencia(string SesionSeguridad, int UsuarioID, int SuscripcionID, int OrigenID, int DistribuidorID, int VigenciaMeses, System.AsyncCallback callback, object asyncState);
        
        string EndCreaLicencia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Licencias/ValidaLicencia", ReplyAction="urn:S_Licencias/ValidaLicenciaResponse")]
        System.IAsyncResult BeginValidaLicencia(string SesionSeguridad, string Licencia, string Maquina, System.AsyncCallback callback, object asyncState);
        
        string EndValidaLicencia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Licencias/UsaLicencia", ReplyAction="urn:S_Licencias/UsaLicenciaResponse")]
        System.IAsyncResult BeginUsaLicencia(string SesionSeguridad, string Licencia, string Maquina, System.AsyncCallback callback, object asyncState);
        
        int EndUsaLicencia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:S_Licencias/CreaUsaLicencia", ReplyAction="urn:S_Licencias/CreaUsaLicenciaResponse")]
        System.IAsyncResult BeginCreaUsaLicencia(string SesionSeguridad, string Maquina, System.AsyncCallback callback, object asyncState);
        
        string EndCreaUsaLicencia(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface S_LicenciasChannel : eClockBase.ES_Licencias.S_Licencias, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreaLicenciaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreaLicenciaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidaLicenciaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidaLicenciaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsaLicenciaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UsaLicenciaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreaUsaLicenciaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreaUsaLicenciaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class S_LicenciasClient : System.ServiceModel.ClientBase<eClockBase.ES_Licencias.S_Licencias>, eClockBase.ES_Licencias.S_Licencias {
        
        private BeginOperationDelegate onBeginCreaLicenciaDelegate;
        
        private EndOperationDelegate onEndCreaLicenciaDelegate;
        
        private System.Threading.SendOrPostCallback onCreaLicenciaCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidaLicenciaDelegate;
        
        private EndOperationDelegate onEndValidaLicenciaDelegate;
        
        private System.Threading.SendOrPostCallback onValidaLicenciaCompletedDelegate;
        
        private BeginOperationDelegate onBeginUsaLicenciaDelegate;
        
        private EndOperationDelegate onEndUsaLicenciaDelegate;
        
        private System.Threading.SendOrPostCallback onUsaLicenciaCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreaUsaLicenciaDelegate;
        
        private EndOperationDelegate onEndCreaUsaLicenciaDelegate;
        
        private System.Threading.SendOrPostCallback onCreaUsaLicenciaCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public S_LicenciasClient() : 
                base(S_LicenciasClient.GetDefaultBinding(), S_LicenciasClient.GetDefaultEndpointAddress()) {
        }
        
        public S_LicenciasClient(EndpointConfiguration endpointConfiguration) : 
                base(S_LicenciasClient.GetBindingForEndpoint(endpointConfiguration), S_LicenciasClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public S_LicenciasClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(S_LicenciasClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public S_LicenciasClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(S_LicenciasClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public S_LicenciasClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreaLicenciaCompletedEventArgs> CreaLicenciaCompleted;
        
        public event System.EventHandler<ValidaLicenciaCompletedEventArgs> ValidaLicenciaCompleted;
        
        public event System.EventHandler<UsaLicenciaCompletedEventArgs> UsaLicenciaCompleted;
        
        public event System.EventHandler<CreaUsaLicenciaCompletedEventArgs> CreaUsaLicenciaCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Licencias.S_Licencias.BeginCreaLicencia(string SesionSeguridad, int UsuarioID, int SuscripcionID, int OrigenID, int DistribuidorID, int VigenciaMeses, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreaLicencia(SesionSeguridad, UsuarioID, SuscripcionID, OrigenID, DistribuidorID, VigenciaMeses, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string eClockBase.ES_Licencias.S_Licencias.EndCreaLicencia(System.IAsyncResult result) {
            return base.Channel.EndCreaLicencia(result);
        }
        
        private System.IAsyncResult OnBeginCreaLicencia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            int UsuarioID = ((int)(inValues[1]));
            int SuscripcionID = ((int)(inValues[2]));
            int OrigenID = ((int)(inValues[3]));
            int DistribuidorID = ((int)(inValues[4]));
            int VigenciaMeses = ((int)(inValues[5]));
            return ((eClockBase.ES_Licencias.S_Licencias)(this)).BeginCreaLicencia(SesionSeguridad, UsuarioID, SuscripcionID, OrigenID, DistribuidorID, VigenciaMeses, callback, asyncState);
        }
        
        private object[] OnEndCreaLicencia(System.IAsyncResult result) {
            string retVal = ((eClockBase.ES_Licencias.S_Licencias)(this)).EndCreaLicencia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreaLicenciaCompleted(object state) {
            if ((this.CreaLicenciaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreaLicenciaCompleted(this, new CreaLicenciaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreaLicenciaAsync(string SesionSeguridad, int UsuarioID, int SuscripcionID, int OrigenID, int DistribuidorID, int VigenciaMeses) {
            this.CreaLicenciaAsync(SesionSeguridad, UsuarioID, SuscripcionID, OrigenID, DistribuidorID, VigenciaMeses, null);
        }
        
        public void CreaLicenciaAsync(string SesionSeguridad, int UsuarioID, int SuscripcionID, int OrigenID, int DistribuidorID, int VigenciaMeses, object userState) {
            if ((this.onBeginCreaLicenciaDelegate == null)) {
                this.onBeginCreaLicenciaDelegate = new BeginOperationDelegate(this.OnBeginCreaLicencia);
            }
            if ((this.onEndCreaLicenciaDelegate == null)) {
                this.onEndCreaLicenciaDelegate = new EndOperationDelegate(this.OnEndCreaLicencia);
            }
            if ((this.onCreaLicenciaCompletedDelegate == null)) {
                this.onCreaLicenciaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreaLicenciaCompleted);
            }
            base.InvokeAsync(this.onBeginCreaLicenciaDelegate, new object[] {
                        SesionSeguridad,
                        UsuarioID,
                        SuscripcionID,
                        OrigenID,
                        DistribuidorID,
                        VigenciaMeses}, this.onEndCreaLicenciaDelegate, this.onCreaLicenciaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Licencias.S_Licencias.BeginValidaLicencia(string SesionSeguridad, string Licencia, string Maquina, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidaLicencia(SesionSeguridad, Licencia, Maquina, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string eClockBase.ES_Licencias.S_Licencias.EndValidaLicencia(System.IAsyncResult result) {
            return base.Channel.EndValidaLicencia(result);
        }
        
        private System.IAsyncResult OnBeginValidaLicencia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            string Licencia = ((string)(inValues[1]));
            string Maquina = ((string)(inValues[2]));
            return ((eClockBase.ES_Licencias.S_Licencias)(this)).BeginValidaLicencia(SesionSeguridad, Licencia, Maquina, callback, asyncState);
        }
        
        private object[] OnEndValidaLicencia(System.IAsyncResult result) {
            string retVal = ((eClockBase.ES_Licencias.S_Licencias)(this)).EndValidaLicencia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidaLicenciaCompleted(object state) {
            if ((this.ValidaLicenciaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidaLicenciaCompleted(this, new ValidaLicenciaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidaLicenciaAsync(string SesionSeguridad, string Licencia, string Maquina) {
            this.ValidaLicenciaAsync(SesionSeguridad, Licencia, Maquina, null);
        }
        
        public void ValidaLicenciaAsync(string SesionSeguridad, string Licencia, string Maquina, object userState) {
            if ((this.onBeginValidaLicenciaDelegate == null)) {
                this.onBeginValidaLicenciaDelegate = new BeginOperationDelegate(this.OnBeginValidaLicencia);
            }
            if ((this.onEndValidaLicenciaDelegate == null)) {
                this.onEndValidaLicenciaDelegate = new EndOperationDelegate(this.OnEndValidaLicencia);
            }
            if ((this.onValidaLicenciaCompletedDelegate == null)) {
                this.onValidaLicenciaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidaLicenciaCompleted);
            }
            base.InvokeAsync(this.onBeginValidaLicenciaDelegate, new object[] {
                        SesionSeguridad,
                        Licencia,
                        Maquina}, this.onEndValidaLicenciaDelegate, this.onValidaLicenciaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Licencias.S_Licencias.BeginUsaLicencia(string SesionSeguridad, string Licencia, string Maquina, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUsaLicencia(SesionSeguridad, Licencia, Maquina, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int eClockBase.ES_Licencias.S_Licencias.EndUsaLicencia(System.IAsyncResult result) {
            return base.Channel.EndUsaLicencia(result);
        }
        
        private System.IAsyncResult OnBeginUsaLicencia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            string Licencia = ((string)(inValues[1]));
            string Maquina = ((string)(inValues[2]));
            return ((eClockBase.ES_Licencias.S_Licencias)(this)).BeginUsaLicencia(SesionSeguridad, Licencia, Maquina, callback, asyncState);
        }
        
        private object[] OnEndUsaLicencia(System.IAsyncResult result) {
            int retVal = ((eClockBase.ES_Licencias.S_Licencias)(this)).EndUsaLicencia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUsaLicenciaCompleted(object state) {
            if ((this.UsaLicenciaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UsaLicenciaCompleted(this, new UsaLicenciaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UsaLicenciaAsync(string SesionSeguridad, string Licencia, string Maquina) {
            this.UsaLicenciaAsync(SesionSeguridad, Licencia, Maquina, null);
        }
        
        public void UsaLicenciaAsync(string SesionSeguridad, string Licencia, string Maquina, object userState) {
            if ((this.onBeginUsaLicenciaDelegate == null)) {
                this.onBeginUsaLicenciaDelegate = new BeginOperationDelegate(this.OnBeginUsaLicencia);
            }
            if ((this.onEndUsaLicenciaDelegate == null)) {
                this.onEndUsaLicenciaDelegate = new EndOperationDelegate(this.OnEndUsaLicencia);
            }
            if ((this.onUsaLicenciaCompletedDelegate == null)) {
                this.onUsaLicenciaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUsaLicenciaCompleted);
            }
            base.InvokeAsync(this.onBeginUsaLicenciaDelegate, new object[] {
                        SesionSeguridad,
                        Licencia,
                        Maquina}, this.onEndUsaLicenciaDelegate, this.onUsaLicenciaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult eClockBase.ES_Licencias.S_Licencias.BeginCreaUsaLicencia(string SesionSeguridad, string Maquina, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreaUsaLicencia(SesionSeguridad, Maquina, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string eClockBase.ES_Licencias.S_Licencias.EndCreaUsaLicencia(System.IAsyncResult result) {
            return base.Channel.EndCreaUsaLicencia(result);
        }
        
        private System.IAsyncResult OnBeginCreaUsaLicencia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SesionSeguridad = ((string)(inValues[0]));
            string Maquina = ((string)(inValues[1]));
            return ((eClockBase.ES_Licencias.S_Licencias)(this)).BeginCreaUsaLicencia(SesionSeguridad, Maquina, callback, asyncState);
        }
        
        private object[] OnEndCreaUsaLicencia(System.IAsyncResult result) {
            string retVal = ((eClockBase.ES_Licencias.S_Licencias)(this)).EndCreaUsaLicencia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreaUsaLicenciaCompleted(object state) {
            if ((this.CreaUsaLicenciaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreaUsaLicenciaCompleted(this, new CreaUsaLicenciaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreaUsaLicenciaAsync(string SesionSeguridad, string Maquina) {
            this.CreaUsaLicenciaAsync(SesionSeguridad, Maquina, null);
        }
        
        public void CreaUsaLicenciaAsync(string SesionSeguridad, string Maquina, object userState) {
            if ((this.onBeginCreaUsaLicenciaDelegate == null)) {
                this.onBeginCreaUsaLicenciaDelegate = new BeginOperationDelegate(this.OnBeginCreaUsaLicencia);
            }
            if ((this.onEndCreaUsaLicenciaDelegate == null)) {
                this.onEndCreaUsaLicenciaDelegate = new EndOperationDelegate(this.OnEndCreaUsaLicencia);
            }
            if ((this.onCreaUsaLicenciaCompletedDelegate == null)) {
                this.onCreaUsaLicenciaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreaUsaLicenciaCompleted);
            }
            base.InvokeAsync(this.onBeginCreaUsaLicenciaDelegate, new object[] {
                        SesionSeguridad,
                        Maquina}, this.onEndCreaUsaLicenciaDelegate, this.onCreaUsaLicenciaCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override eClockBase.ES_Licencias.S_Licencias CreateChannel() {
            return new S_LicenciasClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_S_Licencias)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_S_Licencias)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:50723/S_Licencias.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return S_LicenciasClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_S_Licencias);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return S_LicenciasClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_S_Licencias);
        }
        
        private class S_LicenciasClientChannel : ChannelBase<eClockBase.ES_Licencias.S_Licencias>, eClockBase.ES_Licencias.S_Licencias {
            
            public S_LicenciasClientChannel(System.ServiceModel.ClientBase<eClockBase.ES_Licencias.S_Licencias> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreaLicencia(string SesionSeguridad, int UsuarioID, int SuscripcionID, int OrigenID, int DistribuidorID, int VigenciaMeses, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = SesionSeguridad;
                _args[1] = UsuarioID;
                _args[2] = SuscripcionID;
                _args[3] = OrigenID;
                _args[4] = DistribuidorID;
                _args[5] = VigenciaMeses;
                System.IAsyncResult _result = base.BeginInvoke("CreaLicencia", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreaLicencia(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreaLicencia", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidaLicencia(string SesionSeguridad, string Licencia, string Maquina, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SesionSeguridad;
                _args[1] = Licencia;
                _args[2] = Maquina;
                System.IAsyncResult _result = base.BeginInvoke("ValidaLicencia", _args, callback, asyncState);
                return _result;
            }
            
            public string EndValidaLicencia(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ValidaLicencia", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUsaLicencia(string SesionSeguridad, string Licencia, string Maquina, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = SesionSeguridad;
                _args[1] = Licencia;
                _args[2] = Maquina;
                System.IAsyncResult _result = base.BeginInvoke("UsaLicencia", _args, callback, asyncState);
                return _result;
            }
            
            public int EndUsaLicencia(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("UsaLicencia", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreaUsaLicencia(string SesionSeguridad, string Maquina, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = SesionSeguridad;
                _args[1] = Maquina;
                System.IAsyncResult _result = base.BeginInvoke("CreaUsaLicencia", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCreaUsaLicencia(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CreaUsaLicencia", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_S_Licencias,
        }
    }
}
