//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión del motor en tiempo de ejecución:2.0.50727.42
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace eClock {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DS_TurnosAnual")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS_TurnosAnual : System.Data.DataSet {
        
        private MesesDataTable tableMeses;
        
        private EC_FILTROYEARSDataTable tableEC_FILTROYEARS;
        
        private EC_TURNOS_DIARIOSDataTable tableEC_TURNOS_DIARIOS;
        
        private EC_TIPO_TURNOSDataTable tableEC_TIPO_TURNOS;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS_TurnosAnual() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS_TurnosAnual(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Meses"] != null)) {
                    base.Tables.Add(new MesesDataTable(ds.Tables["Meses"]));
                }
                if ((ds.Tables["EC_FILTROYEARS"] != null)) {
                    base.Tables.Add(new EC_FILTROYEARSDataTable(ds.Tables["EC_FILTROYEARS"]));
                }
                if ((ds.Tables["EC_TURNOS_DIARIOS"] != null)) {
                    base.Tables.Add(new EC_TURNOS_DIARIOSDataTable(ds.Tables["EC_TURNOS_DIARIOS"]));
                }
                if ((ds.Tables["EC_TIPO_TURNOS"] != null)) {
                    base.Tables.Add(new EC_TIPO_TURNOSDataTable(ds.Tables["EC_TIPO_TURNOS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MesesDataTable Meses {
            get {
                return this.tableMeses;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EC_FILTROYEARSDataTable EC_FILTROYEARS {
            get {
                return this.tableEC_FILTROYEARS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EC_TURNOS_DIARIOSDataTable EC_TURNOS_DIARIOS {
            get {
                return this.tableEC_TURNOS_DIARIOS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EC_TIPO_TURNOSDataTable EC_TIPO_TURNOS {
            get {
                return this.tableEC_TIPO_TURNOS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DS_TurnosAnual cln = ((DS_TurnosAnual)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Meses"] != null)) {
                    base.Tables.Add(new MesesDataTable(ds.Tables["Meses"]));
                }
                if ((ds.Tables["EC_FILTROYEARS"] != null)) {
                    base.Tables.Add(new EC_FILTROYEARSDataTable(ds.Tables["EC_FILTROYEARS"]));
                }
                if ((ds.Tables["EC_TURNOS_DIARIOS"] != null)) {
                    base.Tables.Add(new EC_TURNOS_DIARIOSDataTable(ds.Tables["EC_TURNOS_DIARIOS"]));
                }
                if ((ds.Tables["EC_TIPO_TURNOS"] != null)) {
                    base.Tables.Add(new EC_TIPO_TURNOSDataTable(ds.Tables["EC_TIPO_TURNOS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMeses = ((MesesDataTable)(base.Tables["Meses"]));
            if ((initTable == true)) {
                if ((this.tableMeses != null)) {
                    this.tableMeses.InitVars();
                }
            }
            this.tableEC_FILTROYEARS = ((EC_FILTROYEARSDataTable)(base.Tables["EC_FILTROYEARS"]));
            if ((initTable == true)) {
                if ((this.tableEC_FILTROYEARS != null)) {
                    this.tableEC_FILTROYEARS.InitVars();
                }
            }
            this.tableEC_TURNOS_DIARIOS = ((EC_TURNOS_DIARIOSDataTable)(base.Tables["EC_TURNOS_DIARIOS"]));
            if ((initTable == true)) {
                if ((this.tableEC_TURNOS_DIARIOS != null)) {
                    this.tableEC_TURNOS_DIARIOS.InitVars();
                }
            }
            this.tableEC_TIPO_TURNOS = ((EC_TIPO_TURNOSDataTable)(base.Tables["EC_TIPO_TURNOS"]));
            if ((initTable == true)) {
                if ((this.tableEC_TIPO_TURNOS != null)) {
                    this.tableEC_TIPO_TURNOS.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS_TurnosAnual";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DS_TurnosAnual.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-MX");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMeses = new MesesDataTable();
            base.Tables.Add(this.tableMeses);
            this.tableEC_FILTROYEARS = new EC_FILTROYEARSDataTable();
            base.Tables.Add(this.tableEC_FILTROYEARS);
            this.tableEC_TURNOS_DIARIOS = new EC_TURNOS_DIARIOSDataTable();
            base.Tables.Add(this.tableEC_TURNOS_DIARIOS);
            this.tableEC_TIPO_TURNOS = new EC_TIPO_TURNOSDataTable();
            base.Tables.Add(this.tableEC_TIPO_TURNOS);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMeses() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEC_FILTROYEARS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEC_TURNOS_DIARIOS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEC_TIPO_TURNOS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DS_TurnosAnual ds = new DS_TurnosAnual();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MesesRowChangeEventHandler(object sender, MesesRowChangeEvent e);
        
        public delegate void EC_FILTROYEARSRowChangeEventHandler(object sender, EC_FILTROYEARSRowChangeEvent e);
        
        public delegate void EC_TURNOS_DIARIOSRowChangeEventHandler(object sender, EC_TURNOS_DIARIOSRowChangeEvent e);
        
        public delegate void EC_TIPO_TURNOSRowChangeEventHandler(object sender, EC_TIPO_TURNOSRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MesesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MesesDataTable() {
                this.TableName = "Meses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MesesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MesesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MesColumn {
                get {
                    return this.columnMes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MesesRow this[int index] {
                get {
                    return ((MesesRow)(this.Rows[index]));
                }
            }
            
            public event MesesRowChangeEventHandler MesesRowChanging;
            
            public event MesesRowChangeEventHandler MesesRowChanged;
            
            public event MesesRowChangeEventHandler MesesRowDeleting;
            
            public event MesesRowChangeEventHandler MesesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMesesRow(MesesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MesesRow AddMesesRow(string Mes) {
                MesesRow rowMesesRow = ((MesesRow)(this.NewRow()));
                rowMesesRow.ItemArray = new object[] {
                        Mes};
                this.Rows.Add(rowMesesRow);
                return rowMesesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MesesDataTable cln = ((MesesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MesesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMes = base.Columns["Mes"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMes = new System.Data.DataColumn("Mes", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMes);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MesesRow NewMesesRow() {
                return ((MesesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MesesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MesesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MesesRowChanged != null)) {
                    this.MesesRowChanged(this, new MesesRowChangeEvent(((MesesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MesesRowChanging != null)) {
                    this.MesesRowChanging(this, new MesesRowChangeEvent(((MesesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MesesRowDeleted != null)) {
                    this.MesesRowDeleted(this, new MesesRowChangeEvent(((MesesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MesesRowDeleting != null)) {
                    this.MesesRowDeleting(this, new MesesRowChangeEvent(((MesesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMesesRow(MesesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_TurnosAnual ds = new DS_TurnosAnual();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MesesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EC_FILTROYEARSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnYEARS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_FILTROYEARSDataTable() {
                this.TableName = "EC_FILTROYEARS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EC_FILTROYEARSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EC_FILTROYEARSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn YEARSColumn {
                get {
                    return this.columnYEARS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_FILTROYEARSRow this[int index] {
                get {
                    return ((EC_FILTROYEARSRow)(this.Rows[index]));
                }
            }
            
            public event EC_FILTROYEARSRowChangeEventHandler EC_FILTROYEARSRowChanging;
            
            public event EC_FILTROYEARSRowChangeEventHandler EC_FILTROYEARSRowChanged;
            
            public event EC_FILTROYEARSRowChangeEventHandler EC_FILTROYEARSRowDeleting;
            
            public event EC_FILTROYEARSRowChangeEventHandler EC_FILTROYEARSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEC_FILTROYEARSRow(EC_FILTROYEARSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_FILTROYEARSRow AddEC_FILTROYEARSRow(string YEARS) {
                EC_FILTROYEARSRow rowEC_FILTROYEARSRow = ((EC_FILTROYEARSRow)(this.NewRow()));
                rowEC_FILTROYEARSRow.ItemArray = new object[] {
                        YEARS};
                this.Rows.Add(rowEC_FILTROYEARSRow);
                return rowEC_FILTROYEARSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EC_FILTROYEARSDataTable cln = ((EC_FILTROYEARSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EC_FILTROYEARSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnYEARS = base.Columns["YEARS"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnYEARS = new System.Data.DataColumn("YEARS", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnYEARS);
                this.columnYEARS.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_FILTROYEARSRow NewEC_FILTROYEARSRow() {
                return ((EC_FILTROYEARSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EC_FILTROYEARSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EC_FILTROYEARSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EC_FILTROYEARSRowChanged != null)) {
                    this.EC_FILTROYEARSRowChanged(this, new EC_FILTROYEARSRowChangeEvent(((EC_FILTROYEARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EC_FILTROYEARSRowChanging != null)) {
                    this.EC_FILTROYEARSRowChanging(this, new EC_FILTROYEARSRowChangeEvent(((EC_FILTROYEARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EC_FILTROYEARSRowDeleted != null)) {
                    this.EC_FILTROYEARSRowDeleted(this, new EC_FILTROYEARSRowChangeEvent(((EC_FILTROYEARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EC_FILTROYEARSRowDeleting != null)) {
                    this.EC_FILTROYEARSRowDeleting(this, new EC_FILTROYEARSRowChangeEvent(((EC_FILTROYEARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEC_FILTROYEARSRow(EC_FILTROYEARSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_TurnosAnual ds = new DS_TurnosAnual();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EC_FILTROYEARSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EC_TURNOS_DIARIOSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTURNO_DIARIO_ID;
            
            private System.Data.DataColumn columnTURNO_ID;
            
            private System.Data.DataColumn columnTURNO_DIARIO_FECHA;
            
            private System.Data.DataColumn columnTURNO_HIJO_ID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSDataTable() {
                this.TableName = "EC_TURNOS_DIARIOS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EC_TURNOS_DIARIOSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EC_TURNOS_DIARIOSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_DIARIO_IDColumn {
                get {
                    return this.columnTURNO_DIARIO_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_IDColumn {
                get {
                    return this.columnTURNO_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_DIARIO_FECHAColumn {
                get {
                    return this.columnTURNO_DIARIO_FECHA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_HIJO_IDColumn {
                get {
                    return this.columnTURNO_HIJO_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSRow this[int index] {
                get {
                    return ((EC_TURNOS_DIARIOSRow)(this.Rows[index]));
                }
            }
            
            public event EC_TURNOS_DIARIOSRowChangeEventHandler EC_TURNOS_DIARIOSRowChanging;
            
            public event EC_TURNOS_DIARIOSRowChangeEventHandler EC_TURNOS_DIARIOSRowChanged;
            
            public event EC_TURNOS_DIARIOSRowChangeEventHandler EC_TURNOS_DIARIOSRowDeleting;
            
            public event EC_TURNOS_DIARIOSRowChangeEventHandler EC_TURNOS_DIARIOSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEC_TURNOS_DIARIOSRow(EC_TURNOS_DIARIOSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSRow AddEC_TURNOS_DIARIOSRow(decimal TURNO_DIARIO_ID, decimal TURNO_ID, System.DateTime TURNO_DIARIO_FECHA, decimal TURNO_HIJO_ID) {
                EC_TURNOS_DIARIOSRow rowEC_TURNOS_DIARIOSRow = ((EC_TURNOS_DIARIOSRow)(this.NewRow()));
                rowEC_TURNOS_DIARIOSRow.ItemArray = new object[] {
                        TURNO_DIARIO_ID,
                        TURNO_ID,
                        TURNO_DIARIO_FECHA,
                        TURNO_HIJO_ID};
                this.Rows.Add(rowEC_TURNOS_DIARIOSRow);
                return rowEC_TURNOS_DIARIOSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSRow FindByTURNO_DIARIO_ID(decimal TURNO_DIARIO_ID) {
                return ((EC_TURNOS_DIARIOSRow)(this.Rows.Find(new object[] {
                            TURNO_DIARIO_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EC_TURNOS_DIARIOSDataTable cln = ((EC_TURNOS_DIARIOSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EC_TURNOS_DIARIOSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTURNO_DIARIO_ID = base.Columns["TURNO_DIARIO_ID"];
                this.columnTURNO_ID = base.Columns["TURNO_ID"];
                this.columnTURNO_DIARIO_FECHA = base.Columns["TURNO_DIARIO_FECHA"];
                this.columnTURNO_HIJO_ID = base.Columns["TURNO_HIJO_ID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTURNO_DIARIO_ID = new System.Data.DataColumn("TURNO_DIARIO_ID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_DIARIO_ID);
                this.columnTURNO_ID = new System.Data.DataColumn("TURNO_ID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_ID);
                this.columnTURNO_DIARIO_FECHA = new System.Data.DataColumn("TURNO_DIARIO_FECHA", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_DIARIO_FECHA);
                this.columnTURNO_HIJO_ID = new System.Data.DataColumn("TURNO_HIJO_ID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_HIJO_ID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTURNO_DIARIO_ID}, true));
                this.columnTURNO_DIARIO_ID.AllowDBNull = false;
                this.columnTURNO_DIARIO_ID.Unique = true;
                this.columnTURNO_ID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSRow NewEC_TURNOS_DIARIOSRow() {
                return ((EC_TURNOS_DIARIOSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EC_TURNOS_DIARIOSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EC_TURNOS_DIARIOSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EC_TURNOS_DIARIOSRowChanged != null)) {
                    this.EC_TURNOS_DIARIOSRowChanged(this, new EC_TURNOS_DIARIOSRowChangeEvent(((EC_TURNOS_DIARIOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EC_TURNOS_DIARIOSRowChanging != null)) {
                    this.EC_TURNOS_DIARIOSRowChanging(this, new EC_TURNOS_DIARIOSRowChangeEvent(((EC_TURNOS_DIARIOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EC_TURNOS_DIARIOSRowDeleted != null)) {
                    this.EC_TURNOS_DIARIOSRowDeleted(this, new EC_TURNOS_DIARIOSRowChangeEvent(((EC_TURNOS_DIARIOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EC_TURNOS_DIARIOSRowDeleting != null)) {
                    this.EC_TURNOS_DIARIOSRowDeleting(this, new EC_TURNOS_DIARIOSRowChangeEvent(((EC_TURNOS_DIARIOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEC_TURNOS_DIARIOSRow(EC_TURNOS_DIARIOSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_TurnosAnual ds = new DS_TurnosAnual();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EC_TURNOS_DIARIOSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EC_TIPO_TURNOSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTURNO_ID;
            
            private System.Data.DataColumn columnTIPO_TURNO_ID;
            
            private System.Data.DataColumn columnTURNO_NOMBRE;
            
            private System.Data.DataColumn columnTURNO_ASISTENCIA;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSDataTable() {
                this.TableName = "EC_TIPO_TURNOS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EC_TIPO_TURNOSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EC_TIPO_TURNOSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_IDColumn {
                get {
                    return this.columnTURNO_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TIPO_TURNO_IDColumn {
                get {
                    return this.columnTIPO_TURNO_ID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_NOMBREColumn {
                get {
                    return this.columnTURNO_NOMBRE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TURNO_ASISTENCIAColumn {
                get {
                    return this.columnTURNO_ASISTENCIA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSRow this[int index] {
                get {
                    return ((EC_TIPO_TURNOSRow)(this.Rows[index]));
                }
            }
            
            public event EC_TIPO_TURNOSRowChangeEventHandler EC_TIPO_TURNOSRowChanging;
            
            public event EC_TIPO_TURNOSRowChangeEventHandler EC_TIPO_TURNOSRowChanged;
            
            public event EC_TIPO_TURNOSRowChangeEventHandler EC_TIPO_TURNOSRowDeleting;
            
            public event EC_TIPO_TURNOSRowChangeEventHandler EC_TIPO_TURNOSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEC_TIPO_TURNOSRow(EC_TIPO_TURNOSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSRow AddEC_TIPO_TURNOSRow(decimal TURNO_ID, decimal TIPO_TURNO_ID, string TURNO_NOMBRE, decimal TURNO_ASISTENCIA) {
                EC_TIPO_TURNOSRow rowEC_TIPO_TURNOSRow = ((EC_TIPO_TURNOSRow)(this.NewRow()));
                rowEC_TIPO_TURNOSRow.ItemArray = new object[] {
                        TURNO_ID,
                        TIPO_TURNO_ID,
                        TURNO_NOMBRE,
                        TURNO_ASISTENCIA};
                this.Rows.Add(rowEC_TIPO_TURNOSRow);
                return rowEC_TIPO_TURNOSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSRow FindByTURNO_ID(decimal TURNO_ID) {
                return ((EC_TIPO_TURNOSRow)(this.Rows.Find(new object[] {
                            TURNO_ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EC_TIPO_TURNOSDataTable cln = ((EC_TIPO_TURNOSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EC_TIPO_TURNOSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTURNO_ID = base.Columns["TURNO_ID"];
                this.columnTIPO_TURNO_ID = base.Columns["TIPO_TURNO_ID"];
                this.columnTURNO_NOMBRE = base.Columns["TURNO_NOMBRE"];
                this.columnTURNO_ASISTENCIA = base.Columns["TURNO_ASISTENCIA"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTURNO_ID = new System.Data.DataColumn("TURNO_ID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_ID);
                this.columnTIPO_TURNO_ID = new System.Data.DataColumn("TIPO_TURNO_ID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPO_TURNO_ID);
                this.columnTURNO_NOMBRE = new System.Data.DataColumn("TURNO_NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_NOMBRE);
                this.columnTURNO_ASISTENCIA = new System.Data.DataColumn("TURNO_ASISTENCIA", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURNO_ASISTENCIA);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTURNO_ID}, true));
                this.columnTURNO_ID.AllowDBNull = false;
                this.columnTURNO_ID.Unique = true;
                this.columnTURNO_NOMBRE.AllowDBNull = false;
                this.columnTURNO_ASISTENCIA.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSRow NewEC_TIPO_TURNOSRow() {
                return ((EC_TIPO_TURNOSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EC_TIPO_TURNOSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EC_TIPO_TURNOSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EC_TIPO_TURNOSRowChanged != null)) {
                    this.EC_TIPO_TURNOSRowChanged(this, new EC_TIPO_TURNOSRowChangeEvent(((EC_TIPO_TURNOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EC_TIPO_TURNOSRowChanging != null)) {
                    this.EC_TIPO_TURNOSRowChanging(this, new EC_TIPO_TURNOSRowChangeEvent(((EC_TIPO_TURNOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EC_TIPO_TURNOSRowDeleted != null)) {
                    this.EC_TIPO_TURNOSRowDeleted(this, new EC_TIPO_TURNOSRowChangeEvent(((EC_TIPO_TURNOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EC_TIPO_TURNOSRowDeleting != null)) {
                    this.EC_TIPO_TURNOSRowDeleting(this, new EC_TIPO_TURNOSRowChangeEvent(((EC_TIPO_TURNOSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEC_TIPO_TURNOSRow(EC_TIPO_TURNOSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_TurnosAnual ds = new DS_TurnosAnual();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EC_TIPO_TURNOSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MesesRow : System.Data.DataRow {
            
            private MesesDataTable tableMeses;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MesesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMeses = ((MesesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mes {
                get {
                    try {
                        return ((string)(this[this.tableMeses.MesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("El valor de la columna \'Mes\' de la tabla \'Meses\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeses.MesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMesNull() {
                return this.IsNull(this.tableMeses.MesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMesNull() {
                this[this.tableMeses.MesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EC_FILTROYEARSRow : System.Data.DataRow {
            
            private EC_FILTROYEARSDataTable tableEC_FILTROYEARS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EC_FILTROYEARSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEC_FILTROYEARS = ((EC_FILTROYEARSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YEARS {
                get {
                    try {
                        return ((string)(this[this.tableEC_FILTROYEARS.YEARSColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("El valor de la columna \'YEARS\' de la tabla \'EC_FILTROYEARS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableEC_FILTROYEARS.YEARSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYEARSNull() {
                return this.IsNull(this.tableEC_FILTROYEARS.YEARSColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYEARSNull() {
                this[this.tableEC_FILTROYEARS.YEARSColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EC_TURNOS_DIARIOSRow : System.Data.DataRow {
            
            private EC_TURNOS_DIARIOSDataTable tableEC_TURNOS_DIARIOS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EC_TURNOS_DIARIOSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEC_TURNOS_DIARIOS = ((EC_TURNOS_DIARIOSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TURNO_DIARIO_ID {
                get {
                    return ((decimal)(this[this.tableEC_TURNOS_DIARIOS.TURNO_DIARIO_IDColumn]));
                }
                set {
                    this[this.tableEC_TURNOS_DIARIOS.TURNO_DIARIO_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TURNO_ID {
                get {
                    return ((decimal)(this[this.tableEC_TURNOS_DIARIOS.TURNO_IDColumn]));
                }
                set {
                    this[this.tableEC_TURNOS_DIARIOS.TURNO_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TURNO_DIARIO_FECHA {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEC_TURNOS_DIARIOS.TURNO_DIARIO_FECHAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("El valor de la columna \'TURNO_DIARIO_FECHA\' de la tabla \'EC_TURNOS_DIARIOS\' es D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableEC_TURNOS_DIARIOS.TURNO_DIARIO_FECHAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TURNO_HIJO_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableEC_TURNOS_DIARIOS.TURNO_HIJO_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("El valor de la columna \'TURNO_HIJO_ID\' de la tabla \'EC_TURNOS_DIARIOS\' es DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableEC_TURNOS_DIARIOS.TURNO_HIJO_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTURNO_DIARIO_FECHANull() {
                return this.IsNull(this.tableEC_TURNOS_DIARIOS.TURNO_DIARIO_FECHAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTURNO_DIARIO_FECHANull() {
                this[this.tableEC_TURNOS_DIARIOS.TURNO_DIARIO_FECHAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTURNO_HIJO_IDNull() {
                return this.IsNull(this.tableEC_TURNOS_DIARIOS.TURNO_HIJO_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTURNO_HIJO_IDNull() {
                this[this.tableEC_TURNOS_DIARIOS.TURNO_HIJO_IDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EC_TIPO_TURNOSRow : System.Data.DataRow {
            
            private EC_TIPO_TURNOSDataTable tableEC_TIPO_TURNOS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EC_TIPO_TURNOSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEC_TIPO_TURNOS = ((EC_TIPO_TURNOSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TURNO_ID {
                get {
                    return ((decimal)(this[this.tableEC_TIPO_TURNOS.TURNO_IDColumn]));
                }
                set {
                    this[this.tableEC_TIPO_TURNOS.TURNO_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TIPO_TURNO_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableEC_TIPO_TURNOS.TIPO_TURNO_IDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("El valor de la columna \'TIPO_TURNO_ID\' de la tabla \'EC_TIPO_TURNOS\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableEC_TIPO_TURNOS.TIPO_TURNO_IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TURNO_NOMBRE {
                get {
                    return ((string)(this[this.tableEC_TIPO_TURNOS.TURNO_NOMBREColumn]));
                }
                set {
                    this[this.tableEC_TIPO_TURNOS.TURNO_NOMBREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TURNO_ASISTENCIA {
                get {
                    return ((decimal)(this[this.tableEC_TIPO_TURNOS.TURNO_ASISTENCIAColumn]));
                }
                set {
                    this[this.tableEC_TIPO_TURNOS.TURNO_ASISTENCIAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIPO_TURNO_IDNull() {
                return this.IsNull(this.tableEC_TIPO_TURNOS.TIPO_TURNO_IDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIPO_TURNO_IDNull() {
                this[this.tableEC_TIPO_TURNOS.TIPO_TURNO_IDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MesesRowChangeEvent : System.EventArgs {
            
            private MesesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MesesRowChangeEvent(MesesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MesesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EC_FILTROYEARSRowChangeEvent : System.EventArgs {
            
            private EC_FILTROYEARSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_FILTROYEARSRowChangeEvent(EC_FILTROYEARSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_FILTROYEARSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EC_TURNOS_DIARIOSRowChangeEvent : System.EventArgs {
            
            private EC_TURNOS_DIARIOSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSRowChangeEvent(EC_TURNOS_DIARIOSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TURNOS_DIARIOSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EC_TIPO_TURNOSRowChangeEvent : System.EventArgs {
            
            private EC_TIPO_TURNOSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSRowChangeEvent(EC_TIPO_TURNOSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EC_TIPO_TURNOSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591