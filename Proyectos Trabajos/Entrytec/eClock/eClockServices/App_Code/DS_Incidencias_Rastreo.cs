//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace eClock {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DS_Incidencias_Rastreo : DataSet {
        
        private EC_USUARIOSDataTable tableEC_USUARIOS;
        
        public DS_Incidencias_Rastreo() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DS_Incidencias_Rastreo(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EC_USUARIOS"] != null)) {
                    this.Tables.Add(new EC_USUARIOSDataTable(ds.Tables["EC_USUARIOS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EC_USUARIOSDataTable EC_USUARIOS {
            get {
                return this.tableEC_USUARIOS;
            }
        }
        
        public override DataSet Clone() {
            DS_Incidencias_Rastreo cln = ((DS_Incidencias_Rastreo)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["EC_USUARIOS"] != null)) {
                this.Tables.Add(new EC_USUARIOSDataTable(ds.Tables["EC_USUARIOS"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableEC_USUARIOS = ((EC_USUARIOSDataTable)(this.Tables["EC_USUARIOS"]));
            if ((this.tableEC_USUARIOS != null)) {
                this.tableEC_USUARIOS.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DS_Incidencias_Rastreo";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DS_Incidencias_Rastreo.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-MX");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableEC_USUARIOS = new EC_USUARIOSDataTable();
            this.Tables.Add(this.tableEC_USUARIOS);
        }
        
        private bool ShouldSerializeEC_USUARIOS() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void EC_USUARIOSRowChangeEventHandler(object sender, EC_USUARIOSRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EC_USUARIOSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUSUARIO_USUARIO;
            
            private DataColumn columnINCIDENCIA_FECHAHORA;
            
            private DataColumn columnTIPO_INCIDENCIA_NOMBRE;
            
            private DataColumn columnINCIDENCIA_COMENTARIO;
            
            private DataColumn columnINCIDENCIA_ID;
            
            private DataColumn columnEXPR1;
            
            private DataColumn columnUSUARIO_NOMBRE;
            
            internal EC_USUARIOSDataTable() : 
                    base("EC_USUARIOS") {
                this.InitClass();
            }
            
            internal EC_USUARIOSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn USUARIO_USUARIOColumn {
                get {
                    return this.columnUSUARIO_USUARIO;
                }
            }
            
            internal DataColumn INCIDENCIA_FECHAHORAColumn {
                get {
                    return this.columnINCIDENCIA_FECHAHORA;
                }
            }
            
            internal DataColumn TIPO_INCIDENCIA_NOMBREColumn {
                get {
                    return this.columnTIPO_INCIDENCIA_NOMBRE;
                }
            }
            
            internal DataColumn INCIDENCIA_COMENTARIOColumn {
                get {
                    return this.columnINCIDENCIA_COMENTARIO;
                }
            }
            
            internal DataColumn INCIDENCIA_IDColumn {
                get {
                    return this.columnINCIDENCIA_ID;
                }
            }
            
            internal DataColumn EXPR1Column {
                get {
                    return this.columnEXPR1;
                }
            }
            
            internal DataColumn USUARIO_NOMBREColumn {
                get {
                    return this.columnUSUARIO_NOMBRE;
                }
            }
            
            public EC_USUARIOSRow this[int index] {
                get {
                    return ((EC_USUARIOSRow)(this.Rows[index]));
                }
            }
            
            public event EC_USUARIOSRowChangeEventHandler EC_USUARIOSRowChanged;
            
            public event EC_USUARIOSRowChangeEventHandler EC_USUARIOSRowChanging;
            
            public event EC_USUARIOSRowChangeEventHandler EC_USUARIOSRowDeleted;
            
            public event EC_USUARIOSRowChangeEventHandler EC_USUARIOSRowDeleting;
            
            public void AddEC_USUARIOSRow(EC_USUARIOSRow row) {
                this.Rows.Add(row);
            }
            
            public EC_USUARIOSRow AddEC_USUARIOSRow(string USUARIO_USUARIO, System.DateTime INCIDENCIA_FECHAHORA, string TIPO_INCIDENCIA_NOMBRE, string INCIDENCIA_COMENTARIO, System.Decimal INCIDENCIA_ID, System.Decimal EXPR1, string USUARIO_NOMBRE) {
                EC_USUARIOSRow rowEC_USUARIOSRow = ((EC_USUARIOSRow)(this.NewRow()));
                rowEC_USUARIOSRow.ItemArray = new object[] {
                        USUARIO_USUARIO,
                        INCIDENCIA_FECHAHORA,
                        TIPO_INCIDENCIA_NOMBRE,
                        INCIDENCIA_COMENTARIO,
                        INCIDENCIA_ID,
                        EXPR1,
                        USUARIO_NOMBRE};
                this.Rows.Add(rowEC_USUARIOSRow);
                return rowEC_USUARIOSRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EC_USUARIOSDataTable cln = ((EC_USUARIOSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EC_USUARIOSDataTable();
            }
            
            internal void InitVars() {
                this.columnUSUARIO_USUARIO = this.Columns["USUARIO_USUARIO"];
                this.columnINCIDENCIA_FECHAHORA = this.Columns["INCIDENCIA_FECHAHORA"];
                this.columnTIPO_INCIDENCIA_NOMBRE = this.Columns["TIPO_INCIDENCIA_NOMBRE"];
                this.columnINCIDENCIA_COMENTARIO = this.Columns["INCIDENCIA_COMENTARIO"];
                this.columnINCIDENCIA_ID = this.Columns["INCIDENCIA_ID"];
                this.columnEXPR1 = this.Columns["EXPR1"];
                this.columnUSUARIO_NOMBRE = this.Columns["USUARIO_NOMBRE"];
            }
            
            private void InitClass() {
                this.columnUSUARIO_USUARIO = new DataColumn("USUARIO_USUARIO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUSUARIO_USUARIO);
                this.columnINCIDENCIA_FECHAHORA = new DataColumn("INCIDENCIA_FECHAHORA", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINCIDENCIA_FECHAHORA);
                this.columnTIPO_INCIDENCIA_NOMBRE = new DataColumn("TIPO_INCIDENCIA_NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTIPO_INCIDENCIA_NOMBRE);
                this.columnINCIDENCIA_COMENTARIO = new DataColumn("INCIDENCIA_COMENTARIO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINCIDENCIA_COMENTARIO);
                this.columnINCIDENCIA_ID = new DataColumn("INCIDENCIA_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnINCIDENCIA_ID);
                this.columnEXPR1 = new DataColumn("EXPR1", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEXPR1);
                this.columnUSUARIO_NOMBRE = new DataColumn("USUARIO_NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUSUARIO_NOMBRE);
                this.columnUSUARIO_USUARIO.AllowDBNull = false;
                this.columnTIPO_INCIDENCIA_NOMBRE.AllowDBNull = false;
                this.columnINCIDENCIA_ID.AllowDBNull = false;
                this.columnEXPR1.ReadOnly = true;
                this.columnUSUARIO_NOMBRE.AllowDBNull = false;
            }
            
            public EC_USUARIOSRow NewEC_USUARIOSRow() {
                return ((EC_USUARIOSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EC_USUARIOSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EC_USUARIOSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EC_USUARIOSRowChanged != null)) {
                    this.EC_USUARIOSRowChanged(this, new EC_USUARIOSRowChangeEvent(((EC_USUARIOSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EC_USUARIOSRowChanging != null)) {
                    this.EC_USUARIOSRowChanging(this, new EC_USUARIOSRowChangeEvent(((EC_USUARIOSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EC_USUARIOSRowDeleted != null)) {
                    this.EC_USUARIOSRowDeleted(this, new EC_USUARIOSRowChangeEvent(((EC_USUARIOSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EC_USUARIOSRowDeleting != null)) {
                    this.EC_USUARIOSRowDeleting(this, new EC_USUARIOSRowChangeEvent(((EC_USUARIOSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEC_USUARIOSRow(EC_USUARIOSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EC_USUARIOSRow : DataRow {
            
            private EC_USUARIOSDataTable tableEC_USUARIOS;
            
            internal EC_USUARIOSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEC_USUARIOS = ((EC_USUARIOSDataTable)(this.Table));
            }
            
            public string USUARIO_USUARIO {
                get {
                    return ((string)(this[this.tableEC_USUARIOS.USUARIO_USUARIOColumn]));
                }
                set {
                    this[this.tableEC_USUARIOS.USUARIO_USUARIOColumn] = value;
                }
            }
            
            public System.DateTime INCIDENCIA_FECHAHORA {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEC_USUARIOS.INCIDENCIA_FECHAHORAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableEC_USUARIOS.INCIDENCIA_FECHAHORAColumn] = value;
                }
            }
            
            public string TIPO_INCIDENCIA_NOMBRE {
                get {
                    return ((string)(this[this.tableEC_USUARIOS.TIPO_INCIDENCIA_NOMBREColumn]));
                }
                set {
                    this[this.tableEC_USUARIOS.TIPO_INCIDENCIA_NOMBREColumn] = value;
                }
            }
            
            public string INCIDENCIA_COMENTARIO {
                get {
                    try {
                        return ((string)(this[this.tableEC_USUARIOS.INCIDENCIA_COMENTARIOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableEC_USUARIOS.INCIDENCIA_COMENTARIOColumn] = value;
                }
            }
            
            public System.Decimal INCIDENCIA_ID {
                get {
                    return ((System.Decimal)(this[this.tableEC_USUARIOS.INCIDENCIA_IDColumn]));
                }
                set {
                    this[this.tableEC_USUARIOS.INCIDENCIA_IDColumn] = value;
                }
            }
            
            public System.Decimal EXPR1 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableEC_USUARIOS.EXPR1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableEC_USUARIOS.EXPR1Column] = value;
                }
            }
            
            public string USUARIO_NOMBRE {
                get {
                    return ((string)(this[this.tableEC_USUARIOS.USUARIO_NOMBREColumn]));
                }
                set {
                    this[this.tableEC_USUARIOS.USUARIO_NOMBREColumn] = value;
                }
            }
            
            public bool IsINCIDENCIA_FECHAHORANull() {
                return this.IsNull(this.tableEC_USUARIOS.INCIDENCIA_FECHAHORAColumn);
            }
            
            public void SetINCIDENCIA_FECHAHORANull() {
                this[this.tableEC_USUARIOS.INCIDENCIA_FECHAHORAColumn] = System.Convert.DBNull;
            }
            
            public bool IsINCIDENCIA_COMENTARIONull() {
                return this.IsNull(this.tableEC_USUARIOS.INCIDENCIA_COMENTARIOColumn);
            }
            
            public void SetINCIDENCIA_COMENTARIONull() {
                this[this.tableEC_USUARIOS.INCIDENCIA_COMENTARIOColumn] = System.Convert.DBNull;
            }
            
            public bool IsEXPR1Null() {
                return this.IsNull(this.tableEC_USUARIOS.EXPR1Column);
            }
            
            public void SetEXPR1Null() {
                this[this.tableEC_USUARIOS.EXPR1Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EC_USUARIOSRowChangeEvent : EventArgs {
            
            private EC_USUARIOSRow eventRow;
            
            private DataRowAction eventAction;
            
            public EC_USUARIOSRowChangeEvent(EC_USUARIOSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EC_USUARIOSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
