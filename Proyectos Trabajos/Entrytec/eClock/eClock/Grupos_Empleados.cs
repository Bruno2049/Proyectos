//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace eClock {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Grupos_Empleados : DataSet {
        
        private EC_PERSONAS_DATOS_GRUPOSDataTable tableEC_PERSONAS_DATOS_GRUPOS;
        
        public Grupos_Empleados() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Grupos_Empleados(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["EC_PERSONAS_DATOS_GRUPOS"] != null)) {
                    this.Tables.Add(new EC_PERSONAS_DATOS_GRUPOSDataTable(ds.Tables["EC_PERSONAS_DATOS_GRUPOS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EC_PERSONAS_DATOS_GRUPOSDataTable EC_PERSONAS_DATOS_GRUPOS {
            get {
                return this.tableEC_PERSONAS_DATOS_GRUPOS;
            }
        }
        
        public override DataSet Clone() {
            Grupos_Empleados cln = ((Grupos_Empleados)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["EC_PERSONAS_DATOS_GRUPOS"] != null)) {
                this.Tables.Add(new EC_PERSONAS_DATOS_GRUPOSDataTable(ds.Tables["EC_PERSONAS_DATOS_GRUPOS"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableEC_PERSONAS_DATOS_GRUPOS = ((EC_PERSONAS_DATOS_GRUPOSDataTable)(this.Tables["EC_PERSONAS_DATOS_GRUPOS"]));
            if ((this.tableEC_PERSONAS_DATOS_GRUPOS != null)) {
                this.tableEC_PERSONAS_DATOS_GRUPOS.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Grupos_Empleados";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/Grupos_Empleados.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-MX");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableEC_PERSONAS_DATOS_GRUPOS = new EC_PERSONAS_DATOS_GRUPOSDataTable();
            this.Tables.Add(this.tableEC_PERSONAS_DATOS_GRUPOS);
        }
        
        private bool ShouldSerializeEC_PERSONAS_DATOS_GRUPOS() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void EC_PERSONAS_DATOS_GRUPOSRowChangeEventHandler(object sender, EC_PERSONAS_DATOS_GRUPOSRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EC_PERSONAS_DATOS_GRUPOSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnGRUPO;
            
            internal EC_PERSONAS_DATOS_GRUPOSDataTable() : 
                    base("EC_PERSONAS_DATOS_GRUPOS") {
                this.InitClass();
            }
            
            internal EC_PERSONAS_DATOS_GRUPOSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn GRUPOColumn {
                get {
                    return this.columnGRUPO;
                }
            }
            
            public EC_PERSONAS_DATOS_GRUPOSRow this[int index] {
                get {
                    return ((EC_PERSONAS_DATOS_GRUPOSRow)(this.Rows[index]));
                }
            }
            
            public event EC_PERSONAS_DATOS_GRUPOSRowChangeEventHandler EC_PERSONAS_DATOS_GRUPOSRowChanged;
            
            public event EC_PERSONAS_DATOS_GRUPOSRowChangeEventHandler EC_PERSONAS_DATOS_GRUPOSRowChanging;
            
            public event EC_PERSONAS_DATOS_GRUPOSRowChangeEventHandler EC_PERSONAS_DATOS_GRUPOSRowDeleted;
            
            public event EC_PERSONAS_DATOS_GRUPOSRowChangeEventHandler EC_PERSONAS_DATOS_GRUPOSRowDeleting;
            
            public void AddEC_PERSONAS_DATOS_GRUPOSRow(EC_PERSONAS_DATOS_GRUPOSRow row) {
                this.Rows.Add(row);
            }
            
            public EC_PERSONAS_DATOS_GRUPOSRow AddEC_PERSONAS_DATOS_GRUPOSRow(string GRUPO) {
                EC_PERSONAS_DATOS_GRUPOSRow rowEC_PERSONAS_DATOS_GRUPOSRow = ((EC_PERSONAS_DATOS_GRUPOSRow)(this.NewRow()));
                rowEC_PERSONAS_DATOS_GRUPOSRow.ItemArray = new object[] {
                        GRUPO};
                this.Rows.Add(rowEC_PERSONAS_DATOS_GRUPOSRow);
                return rowEC_PERSONAS_DATOS_GRUPOSRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EC_PERSONAS_DATOS_GRUPOSDataTable cln = ((EC_PERSONAS_DATOS_GRUPOSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EC_PERSONAS_DATOS_GRUPOSDataTable();
            }
            
            internal void InitVars() {
                this.columnGRUPO = this.Columns["GRUPO"];
            }
            
            private void InitClass() {
                this.columnGRUPO = new DataColumn("GRUPO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGRUPO);
            }
            
            public EC_PERSONAS_DATOS_GRUPOSRow NewEC_PERSONAS_DATOS_GRUPOSRow() {
                return ((EC_PERSONAS_DATOS_GRUPOSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EC_PERSONAS_DATOS_GRUPOSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EC_PERSONAS_DATOS_GRUPOSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EC_PERSONAS_DATOS_GRUPOSRowChanged != null)) {
                    this.EC_PERSONAS_DATOS_GRUPOSRowChanged(this, new EC_PERSONAS_DATOS_GRUPOSRowChangeEvent(((EC_PERSONAS_DATOS_GRUPOSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EC_PERSONAS_DATOS_GRUPOSRowChanging != null)) {
                    this.EC_PERSONAS_DATOS_GRUPOSRowChanging(this, new EC_PERSONAS_DATOS_GRUPOSRowChangeEvent(((EC_PERSONAS_DATOS_GRUPOSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EC_PERSONAS_DATOS_GRUPOSRowDeleted != null)) {
                    this.EC_PERSONAS_DATOS_GRUPOSRowDeleted(this, new EC_PERSONAS_DATOS_GRUPOSRowChangeEvent(((EC_PERSONAS_DATOS_GRUPOSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EC_PERSONAS_DATOS_GRUPOSRowDeleting != null)) {
                    this.EC_PERSONAS_DATOS_GRUPOSRowDeleting(this, new EC_PERSONAS_DATOS_GRUPOSRowChangeEvent(((EC_PERSONAS_DATOS_GRUPOSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEC_PERSONAS_DATOS_GRUPOSRow(EC_PERSONAS_DATOS_GRUPOSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EC_PERSONAS_DATOS_GRUPOSRow : DataRow {
            
            private EC_PERSONAS_DATOS_GRUPOSDataTable tableEC_PERSONAS_DATOS_GRUPOS;
            
            internal EC_PERSONAS_DATOS_GRUPOSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEC_PERSONAS_DATOS_GRUPOS = ((EC_PERSONAS_DATOS_GRUPOSDataTable)(this.Table));
            }
            
            public string GRUPO {
                get {
                    try {
                        return ((string)(this[this.tableEC_PERSONAS_DATOS_GRUPOS.GRUPOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableEC_PERSONAS_DATOS_GRUPOS.GRUPOColumn] = value;
                }
            }
            
            public bool IsGRUPONull() {
                return this.IsNull(this.tableEC_PERSONAS_DATOS_GRUPOS.GRUPOColumn);
            }
            
            public void SetGRUPONull() {
                this[this.tableEC_PERSONAS_DATOS_GRUPOS.GRUPOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EC_PERSONAS_DATOS_GRUPOSRowChangeEvent : EventArgs {
            
            private EC_PERSONAS_DATOS_GRUPOSRow eventRow;
            
            private DataRowAction eventAction;
            
            public EC_PERSONAS_DATOS_GRUPOSRowChangeEvent(EC_PERSONAS_DATOS_GRUPOSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EC_PERSONAS_DATOS_GRUPOSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
