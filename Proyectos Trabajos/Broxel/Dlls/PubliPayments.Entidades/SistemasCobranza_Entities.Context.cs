//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PubliPayments.Entidades
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SistemasCobranzaEntities : DbContext
    {
        public SistemasCobranzaEntities()
            : base("name=SistemasCobranzaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TraceLog> TraceLog { get; set; }
        public virtual DbSet<CatDelegaciones> CatDelegaciones { get; set; }
        public virtual DbSet<Dominio> Dominio { get; set; }
        public virtual DbSet<RelacionDelegaciones> RelacionDelegaciones { get; set; }
        public virtual DbSet<RelacionUsuarios> RelacionUsuarios { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Archivos> Archivos { get; set; }
        public virtual DbSet<ArchivosError> ArchivosError { get; set; }
        public virtual DbSet<VUsuarios> VUsuarios { get; set; }
        public virtual DbSet<HistoricoOrdenes> HistoricoOrdenes { get; set; }
        public virtual DbSet<CatEstatusUsuario> CatEstatusUsuario { get; set; }
        public virtual DbSet<CatCamposFormulario> CatCamposFormulario { get; set; }
        public virtual DbSet<CatalogoXCampo> CatalogoXCampoes { get; set; }
        public virtual DbSet<CatFuncionesJ> CatFuncionesJS { get; set; }
        public virtual DbSet<SubFormulario> SubFormularios { get; set; }
        public virtual DbSet<CamposXSubFormulario> CamposXSubFormularios { get; set; }
        public virtual DbSet<BitacoraPassword> BitacoraPasswords { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Respuestas> Respuestas { get; set; }
        public virtual DbSet<Formulario> Formulario { get; set; }
        public virtual DbSet<CamposRespuesta> CamposRespuesta { get; set; }
        public virtual DbSet<Aplicacion> Aplicacion { get; set; }
        public virtual DbSet<Ordenes> Ordenes { get; set; }
        public virtual DbSet<Creditos> Creditos { get; set; }
        public virtual DbSet<Monitoreo> Monitoreo { get; set; }
    
        public virtual int BorrarRespuestas(Nullable<int> idOrden)
        {
            var idOrdenParameter = idOrden.HasValue ?
                new ObjectParameter("idOrden", idOrden) :
                new ObjectParameter("idOrden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BorrarRespuestas", idOrdenParameter);
        }
    
        public virtual ObjectResult<InsUpdLondon_Result> InsUpdLondon(Nullable<int> idArchivo, string credito, string campos, string valores, Nullable<int> tipo)
        {
            var idArchivoParameter = idArchivo.HasValue ?
                new ObjectParameter("idArchivo", idArchivo) :
                new ObjectParameter("idArchivo", typeof(int));
    
            var creditoParameter = credito != null ?
                new ObjectParameter("Credito", credito) :
                new ObjectParameter("Credito", typeof(string));
    
            var camposParameter = campos != null ?
                new ObjectParameter("Campos", campos) :
                new ObjectParameter("Campos", typeof(string));
    
            var valoresParameter = valores != null ?
                new ObjectParameter("Valores", valores) :
                new ObjectParameter("Valores", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsUpdLondon_Result>("InsUpdLondon", idArchivoParameter, creditoParameter, camposParameter, valoresParameter, tipoParameter);
        }
    
        public virtual ObjectResult<ObtenerCamposTabla_Result> ObtenerCamposTabla(string tabla)
        {
            var tablaParameter = tabla != null ?
                new ObjectParameter("Tabla", tabla) :
                new ObjectParameter("Tabla", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerCamposTabla_Result>("ObtenerCamposTabla", tablaParameter);
        }
    
        public virtual ObjectResult<ObtenerListasDashboard_Result> ObtenerListasDashboard(string accion, string subAccion, Nullable<int> fi_Usuario, string fc_Usuario, Nullable<int> fi_Dominio, Nullable<int> fi_Rol, string fc_DashBoard, string delegacion, string nom_corto, string estado, string idUsuarioPadre, string idUsuario)
        {
            var accionParameter = accion != null ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(string));
    
            var subAccionParameter = subAccion != null ?
                new ObjectParameter("SubAccion", subAccion) :
                new ObjectParameter("SubAccion", typeof(string));
    
            var fi_UsuarioParameter = fi_Usuario.HasValue ?
                new ObjectParameter("fi_Usuario", fi_Usuario) :
                new ObjectParameter("fi_Usuario", typeof(int));
    
            var fc_UsuarioParameter = fc_Usuario != null ?
                new ObjectParameter("fc_Usuario", fc_Usuario) :
                new ObjectParameter("fc_Usuario", typeof(string));
    
            var fi_DominioParameter = fi_Dominio.HasValue ?
                new ObjectParameter("fi_Dominio", fi_Dominio) :
                new ObjectParameter("fi_Dominio", typeof(int));
    
            var fi_RolParameter = fi_Rol.HasValue ?
                new ObjectParameter("fi_Rol", fi_Rol) :
                new ObjectParameter("fi_Rol", typeof(int));
    
            var fc_DashBoardParameter = fc_DashBoard != null ?
                new ObjectParameter("fc_DashBoard", fc_DashBoard) :
                new ObjectParameter("fc_DashBoard", typeof(string));
    
            var delegacionParameter = delegacion != null ?
                new ObjectParameter("Delegacion", delegacion) :
                new ObjectParameter("Delegacion", typeof(string));
    
            var nom_cortoParameter = nom_corto != null ?
                new ObjectParameter("nom_corto", nom_corto) :
                new ObjectParameter("nom_corto", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var idUsuarioPadreParameter = idUsuarioPadre != null ?
                new ObjectParameter("idUsuarioPadre", idUsuarioPadre) :
                new ObjectParameter("idUsuarioPadre", typeof(string));
    
            var idUsuarioParameter = idUsuario != null ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerListasDashboard_Result>("ObtenerListasDashboard", accionParameter, subAccionParameter, fi_UsuarioParameter, fc_UsuarioParameter, fi_DominioParameter, fi_RolParameter, fc_DashBoardParameter, delegacionParameter, nom_cortoParameter, estadoParameter, idUsuarioPadreParameter, idUsuarioParameter);
        }
    
        public virtual ObjectResult<ObtenerClavesDashboard_Result> ObtenerClavesDashboard(string fc_DashBoard)
        {
            var fc_DashBoardParameter = fc_DashBoard != null ?
                new ObjectParameter("fc_DashBoard", fc_DashBoard) :
                new ObjectParameter("fc_DashBoard", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerClavesDashboard_Result>("ObtenerClavesDashboard", fc_DashBoardParameter);
        }
    
        public virtual ObjectResult<ObtenerUltimoLogin_Result> ObtenerUltimoLogin(string idUsuario)
        {
            var idUsuarioParameter = idUsuario != null ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerUltimoLogin_Result>("ObtenerUltimoLogin", idUsuarioParameter);
        }
    
        public virtual ObjectResult<ObtenerIndicadorDashboard_Result1> ObtenerIndicadorDashboard(string accion, string subAccion, string indicador, Nullable<int> fi_Usuario, string fc_Usuario, Nullable<int> fi_Dominio, Nullable<int> fi_Rol, string fc_DashBoard, string fc_Delegacion, string fc_Despacho, string fc_Estado, string fc_idUsuarioPadre, string fc_idUsuario, string debug)
        {
            var accionParameter = accion != null ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(string));
    
            var subAccionParameter = subAccion != null ?
                new ObjectParameter("SubAccion", subAccion) :
                new ObjectParameter("SubAccion", typeof(string));
    
            var indicadorParameter = indicador != null ?
                new ObjectParameter("Indicador", indicador) :
                new ObjectParameter("Indicador", typeof(string));
    
            var fi_UsuarioParameter = fi_Usuario.HasValue ?
                new ObjectParameter("fi_Usuario", fi_Usuario) :
                new ObjectParameter("fi_Usuario", typeof(int));
    
            var fc_UsuarioParameter = fc_Usuario != null ?
                new ObjectParameter("fc_Usuario", fc_Usuario) :
                new ObjectParameter("fc_Usuario", typeof(string));
    
            var fi_DominioParameter = fi_Dominio.HasValue ?
                new ObjectParameter("fi_Dominio", fi_Dominio) :
                new ObjectParameter("fi_Dominio", typeof(int));
    
            var fi_RolParameter = fi_Rol.HasValue ?
                new ObjectParameter("fi_Rol", fi_Rol) :
                new ObjectParameter("fi_Rol", typeof(int));
    
            var fc_DashBoardParameter = fc_DashBoard != null ?
                new ObjectParameter("fc_DashBoard", fc_DashBoard) :
                new ObjectParameter("fc_DashBoard", typeof(string));
    
            var fc_DelegacionParameter = fc_Delegacion != null ?
                new ObjectParameter("fc_Delegacion", fc_Delegacion) :
                new ObjectParameter("fc_Delegacion", typeof(string));
    
            var fc_DespachoParameter = fc_Despacho != null ?
                new ObjectParameter("fc_Despacho", fc_Despacho) :
                new ObjectParameter("fc_Despacho", typeof(string));
    
            var fc_EstadoParameter = fc_Estado != null ?
                new ObjectParameter("fc_Estado", fc_Estado) :
                new ObjectParameter("fc_Estado", typeof(string));
    
            var fc_idUsuarioPadreParameter = fc_idUsuarioPadre != null ?
                new ObjectParameter("fc_idUsuarioPadre", fc_idUsuarioPadre) :
                new ObjectParameter("fc_idUsuarioPadre", typeof(string));
    
            var fc_idUsuarioParameter = fc_idUsuario != null ?
                new ObjectParameter("fc_idUsuario", fc_idUsuario) :
                new ObjectParameter("fc_idUsuario", typeof(string));
    
            var debugParameter = debug != null ?
                new ObjectParameter("debug", debug) :
                new ObjectParameter("debug", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerIndicadorDashboard_Result1>("ObtenerIndicadorDashboard", accionParameter, subAccionParameter, indicadorParameter, fi_UsuarioParameter, fc_UsuarioParameter, fi_DominioParameter, fi_RolParameter, fc_DashBoardParameter, fc_DelegacionParameter, fc_DespachoParameter, fc_EstadoParameter, fc_idUsuarioPadreParameter, fc_idUsuarioParameter, debugParameter);
        }
    
        public virtual ObjectResult<ObtenerIndicadorBloqueDashboard_Result> ObtenerIndicadorBloqueDashboard(string accion, string subAccion, Nullable<int> bloque, Nullable<int> fi_Usuario, string fc_Usuario, Nullable<int> fi_Dominio, Nullable<int> fi_Rol, string fc_DashBoard, string fc_Delegacion, string fc_Despacho, string fc_Estado, string fc_idUsuarioPadre, string fc_idUsuario, string debug, string tipoFormulario, string esCallCenter)
        {
            var accionParameter = accion != null ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(string));
    
            var subAccionParameter = subAccion != null ?
                new ObjectParameter("SubAccion", subAccion) :
                new ObjectParameter("SubAccion", typeof(string));
    
            var bloqueParameter = bloque.HasValue ?
                new ObjectParameter("Bloque", bloque) :
                new ObjectParameter("Bloque", typeof(int));
    
            var fi_UsuarioParameter = fi_Usuario.HasValue ?
                new ObjectParameter("fi_Usuario", fi_Usuario) :
                new ObjectParameter("fi_Usuario", typeof(int));
    
            var fc_UsuarioParameter = fc_Usuario != null ?
                new ObjectParameter("fc_Usuario", fc_Usuario) :
                new ObjectParameter("fc_Usuario", typeof(string));
    
            var fi_DominioParameter = fi_Dominio.HasValue ?
                new ObjectParameter("fi_Dominio", fi_Dominio) :
                new ObjectParameter("fi_Dominio", typeof(int));
    
            var fi_RolParameter = fi_Rol.HasValue ?
                new ObjectParameter("fi_Rol", fi_Rol) :
                new ObjectParameter("fi_Rol", typeof(int));
    
            var fc_DashBoardParameter = fc_DashBoard != null ?
                new ObjectParameter("fc_DashBoard", fc_DashBoard) :
                new ObjectParameter("fc_DashBoard", typeof(string));
    
            var fc_DelegacionParameter = fc_Delegacion != null ?
                new ObjectParameter("fc_Delegacion", fc_Delegacion) :
                new ObjectParameter("fc_Delegacion", typeof(string));
    
            var fc_DespachoParameter = fc_Despacho != null ?
                new ObjectParameter("fc_Despacho", fc_Despacho) :
                new ObjectParameter("fc_Despacho", typeof(string));
    
            var fc_EstadoParameter = fc_Estado != null ?
                new ObjectParameter("fc_Estado", fc_Estado) :
                new ObjectParameter("fc_Estado", typeof(string));
    
            var fc_idUsuarioPadreParameter = fc_idUsuarioPadre != null ?
                new ObjectParameter("fc_idUsuarioPadre", fc_idUsuarioPadre) :
                new ObjectParameter("fc_idUsuarioPadre", typeof(string));
    
            var fc_idUsuarioParameter = fc_idUsuario != null ?
                new ObjectParameter("fc_idUsuario", fc_idUsuario) :
                new ObjectParameter("fc_idUsuario", typeof(string));
    
            var debugParameter = debug != null ?
                new ObjectParameter("debug", debug) :
                new ObjectParameter("debug", typeof(string));
    
            var tipoFormularioParameter = tipoFormulario != null ?
                new ObjectParameter("TipoFormulario", tipoFormulario) :
                new ObjectParameter("TipoFormulario", typeof(string));
    
            var esCallCenterParameter = esCallCenter != null ?
                new ObjectParameter("esCallCenter", esCallCenter) :
                new ObjectParameter("esCallCenter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerIndicadorBloqueDashboard_Result>("ObtenerIndicadorBloqueDashboard", accionParameter, subAccionParameter, bloqueParameter, fi_UsuarioParameter, fc_UsuarioParameter, fi_DominioParameter, fi_RolParameter, fc_DashBoardParameter, fc_DelegacionParameter, fc_DespachoParameter, fc_EstadoParameter, fc_idUsuarioPadreParameter, fc_idUsuarioParameter, debugParameter, tipoFormularioParameter, esCallCenterParameter);
        }
    }
}
