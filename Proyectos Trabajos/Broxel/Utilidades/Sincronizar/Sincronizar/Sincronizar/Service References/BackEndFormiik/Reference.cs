//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sincronizar.BackEndFormiik {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HashTableCompositeType", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
    [System.SerializableAttribute()]
    public partial class HashTableCompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
    [System.SerializableAttribute()]
    public partial class FormiikOperationFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BackEndFormiik.IBackEnd")]
    public interface IBackEnd {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserName", ReplyAction="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserNameResponse")]
        string AddNewWorkOrderToUserName(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, Sincronizar.BackEndFormiik.HashTableCompositeType[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserName", ReplyAction="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserNameResponse")]
        System.Threading.Tasks.Task<string> AddNewWorkOrderToUserNameAsync(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, Sincronizar.BackEndFormiik.HashTableCompositeType[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLResponse")]
        void AddWorkOrdersXML(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLResponse")]
        System.Threading.Tasks.Task AddWorkOrdersXMLAsync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLIdResponse")]
        string AddWorkOrdersXMLId(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLIdResponse")]
        System.Threading.Tasks.Task<string> AddWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdResponse")]
        string ReassignWorkOrdersXMLId(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdResponse")]
        System.Threading.Tasks.Task<string> ReassignWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdSync", ReplyAction="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdSyncResponse")]
        void ReassignWorkOrdersXMLIdSync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdSync", ReplyAction="http://tempuri.org/IBackEnd/ReassignWorkOrdersXMLIdSyncResponse")]
        System.Threading.Tasks.Task ReassignWorkOrdersXMLIdSyncAsync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrder", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrderResponse")]
        string CancelWorkOrder(string id, string clientId, string productId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrder", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrderResponse")]
        System.Threading.Tasks.Task<string> CancelWorkOrderAsync(string id, string clientId, string productId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLResponse")]
        void CancelWorkOrdersXML(string clientId, string productId, string cancelOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLResponse")]
        System.Threading.Tasks.Task CancelWorkOrdersXMLAsync(string clientId, string productId, string cancelOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLIdResponse")]
        string CancelWorkOrdersXMLId(string clientId, string productId, string cancelOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLIdResponse")]
        System.Threading.Tasks.Task<string> CancelWorkOrdersXMLIdAsync(string clientId, string productId, string cancelOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByUser", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sincronizar.BackEndFormiik.FormiikOperationFault), Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByUserFormiikOperationFaultFault", Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
        int CancelWorkOrdersByUser(string clientId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByUser", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByUserResponse")]
        System.Threading.Tasks.Task<int> CancelWorkOrdersByUserAsync(string clientId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRange", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sincronizar.BackEndFormiik.FormiikOperationFault), Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRangeFormiikOperationFaultFault" +
            "", Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
        int CancelWorkOrdersByDateRange(string clientId, string productId, string externalType, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRange", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRangeResponse")]
        System.Threading.Tasks.Task<int> CancelWorkOrdersByDateRangeAsync(string clientId, string productId, string externalType, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLResponse")]
        void UpdateWorkOrdersXML(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLResponse")]
        System.Threading.Tasks.Task UpdateWorkOrdersXMLAsync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLIdResponse")]
        string UpdateWorkOrdersXMLId(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLId", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLIdResponse")]
        System.Threading.Tasks.Task<string> UpdateWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CleanAttachments", ReplyAction="http://tempuri.org/IBackEnd/CleanAttachmentsResponse")]
        void CleanAttachments(string clientId, string productId, string externalId, string assignedTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CleanAttachments", ReplyAction="http://tempuri.org/IBackEnd/CleanAttachmentsResponse")]
        System.Threading.Tasks.Task CleanAttachmentsAsync(string clientId, string productId, string externalId, string assignedTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIdsResponse")]
        string GetWorkOrderHistoryByExternalIds(string clientId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIdsResponse")]
        System.Threading.Tasks.Task<string> GetWorkOrderHistoryByExternalIdsAsync(string clientId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Sincronizar.BackEndFormiik.FormiikOperationFault), Action="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIdsFormiikOperationFaultF" +
            "ault", Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
        string GetWorkOrdersStateByExternalIds(string clientId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIdsResponse")]
        System.Threading.Tasks.Task<string> GetWorkOrdersStateByExternalIdsAsync(string clientId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderStatesByPeriodAndProcess", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderStatesByPeriodAndProcessResponse")]
        string GetWorkOrderStatesByPeriodAndProcess(string clientId, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderStatesByPeriodAndProcess", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderStatesByPeriodAndProcessResponse")]
        System.Threading.Tasks.Task<string> GetWorkOrderStatesByPeriodAndProcessAsync(string clientId, string parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserName", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNameResponse")]
        string QueueMessageToUserName(string clientId, string productId, string userName, string sender, string content, bool isImportant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserName", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNameResponse")]
        System.Threading.Tasks.Task<string> QueueMessageToUserNameAsync(string clientId, string productId, string userName, string sender, string content, bool isImportant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserNames", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNamesResponse")]
        string QueueMessageToUserNames(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserNames", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNamesResponse")]
        System.Threading.Tasks.Task<string> QueueMessageToUserNamesAsync(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUserActivity", ReplyAction="http://tempuri.org/IBackEnd/GetUserActivityResponse")]
        string GetUserActivity(string client, string users, string initialDate, string finalDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUserActivity", ReplyAction="http://tempuri.org/IBackEnd/GetUserActivityResponse")]
        System.Threading.Tasks.Task<string> GetUserActivityAsync(string client, string users, string initialDate, string finalDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUsers", ReplyAction="http://tempuri.org/IBackEnd/DeleteUsersResponse")]
        void DeleteUsers(string client, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUsers", ReplyAction="http://tempuri.org/IBackEnd/DeleteUsersResponse")]
        System.Threading.Tasks.Task DeleteUsersAsync(string client, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUserCatalogs", ReplyAction="http://tempuri.org/IBackEnd/SetUserCatalogsResponse")]
        void SetUserCatalogs(string clientId, string users, string catalogDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUserCatalogs", ReplyAction="http://tempuri.org/IBackEnd/SetUserCatalogsResponse")]
        System.Threading.Tasks.Task SetUserCatalogsAsync(string clientId, string users, string catalogDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetGroup", ReplyAction="http://tempuri.org/IBackEnd/SetGroupResponse")]
        void SetGroup(string clientId, string users, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetGroup", ReplyAction="http://tempuri.org/IBackEnd/SetGroupResponse")]
        System.Threading.Tasks.Task SetGroupAsync(string clientId, string users, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUsersGroups", ReplyAction="http://tempuri.org/IBackEnd/SetUsersGroupsResponse")]
        void SetUsersGroups(string clientId, string xmlGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUsersGroups", ReplyAction="http://tempuri.org/IBackEnd/SetUsersGroupsResponse")]
        System.Threading.Tasks.Task SetUsersGroupsAsync(string clientId, string xmlGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUser", ReplyAction="http://tempuri.org/IBackEnd/SetUserResponse")]
        string SetUser(string clientId, string username, string password, string idrole, string groupid, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUser", ReplyAction="http://tempuri.org/IBackEnd/SetUserResponse")]
        System.Threading.Tasks.Task<string> SetUserAsync(string clientId, string username, string password, string idrole, string groupid, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUser", ReplyAction="http://tempuri.org/IBackEnd/DeleteUserResponse")]
        bool DeleteUser(string clientId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUser", ReplyAction="http://tempuri.org/IBackEnd/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string clientId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersion", ReplyAction="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersionResponse")]
        string GetUsersLastLoginAndVersion(string clientId, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersion", ReplyAction="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersionResponse")]
        System.Threading.Tasks.Task<string> GetUsersLastLoginAndVersionAsync(string clientId, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetResponses", ReplyAction="http://tempuri.org/IBackEnd/GetResponsesResponse")]
        string GetResponses(string clientId, string productId, string Date, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetResponses", ReplyAction="http://tempuri.org/IBackEnd/GetResponsesResponse")]
        System.Threading.Tasks.Task<string> GetResponsesAsync(string clientId, string productId, string Date, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteResponses", ReplyAction="http://tempuri.org/IBackEnd/DeleteResponsesResponse")]
        void DeleteResponses(string clientId, string productId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteResponses", ReplyAction="http://tempuri.org/IBackEnd/DeleteResponsesResponse")]
        System.Threading.Tasks.Task DeleteResponsesAsync(string clientId, string productId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetSecurityToken", ReplyAction="http://tempuri.org/IBackEnd/GetSecurityTokenResponse")]
        string GetSecurityToken(string clientId, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetSecurityToken", ReplyAction="http://tempuri.org/IBackEnd/GetSecurityTokenResponse")]
        System.Threading.Tasks.Task<string> GetSecurityTokenAsync(string clientId, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetLatitudeAndLongitude", ReplyAction="http://tempuri.org/IBackEnd/GetLatitudeAndLongitudeResponse")]
        string GetLatitudeAndLongitude(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetLatitudeAndLongitude", ReplyAction="http://tempuri.org/IBackEnd/GetLatitudeAndLongitudeResponse")]
        System.Threading.Tasks.Task<string> GetLatitudeAndLongitudeAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SendWorkOrderToClient", ReplyAction="http://tempuri.org/IBackEnd/SendWorkOrderToClientResponse")]
        bool SendWorkOrderToClient(string workOrderId, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SendWorkOrderToClient", ReplyAction="http://tempuri.org/IBackEnd/SendWorkOrderToClientResponse")]
        System.Threading.Tasks.Task<bool> SendWorkOrderToClientAsync(string workOrderId, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReporteErrores", ReplyAction="http://tempuri.org/IBackEnd/ReporteErroresResponse")]
        bool ReporteErrores(string error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReporteErrores", ReplyAction="http://tempuri.org/IBackEnd/ReporteErroresResponse")]
        System.Threading.Tasks.Task<bool> ReporteErroresAsync(string error);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackEndChannel : Sincronizar.BackEndFormiik.IBackEnd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackEndClient : System.ServiceModel.ClientBase<Sincronizar.BackEndFormiik.IBackEnd>, Sincronizar.BackEndFormiik.IBackEnd {
        
        public BackEndClient() {
        }
        
        public BackEndClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BackEndClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackEndClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackEndClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddNewWorkOrderToUserName(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, Sincronizar.BackEndFormiik.HashTableCompositeType[] parameters) {
            return base.Channel.AddNewWorkOrderToUserName(id, clientId, productId, type, version, userName, priority, expirationDate, cancellationDate, parameters);
        }
        
        public System.Threading.Tasks.Task<string> AddNewWorkOrderToUserNameAsync(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, Sincronizar.BackEndFormiik.HashTableCompositeType[] parameters) {
            return base.Channel.AddNewWorkOrderToUserNameAsync(id, clientId, productId, type, version, userName, priority, expirationDate, cancellationDate, parameters);
        }
        
        public void AddWorkOrdersXML(string clientId, string productId, string workOrders) {
            base.Channel.AddWorkOrdersXML(clientId, productId, workOrders);
        }
        
        public System.Threading.Tasks.Task AddWorkOrdersXMLAsync(string clientId, string productId, string workOrders) {
            return base.Channel.AddWorkOrdersXMLAsync(clientId, productId, workOrders);
        }
        
        public string AddWorkOrdersXMLId(string clientId, string productId, string workOrders) {
            return base.Channel.AddWorkOrdersXMLId(clientId, productId, workOrders);
        }
        
        public System.Threading.Tasks.Task<string> AddWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders) {
            return base.Channel.AddWorkOrdersXMLIdAsync(clientId, productId, workOrders);
        }
        
        public string ReassignWorkOrdersXMLId(string clientId, string productId, string workOrders) {
            return base.Channel.ReassignWorkOrdersXMLId(clientId, productId, workOrders);
        }
        
        public System.Threading.Tasks.Task<string> ReassignWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders) {
            return base.Channel.ReassignWorkOrdersXMLIdAsync(clientId, productId, workOrders);
        }
        
        public void ReassignWorkOrdersXMLIdSync(string clientId, string productId, string workOrders) {
            base.Channel.ReassignWorkOrdersXMLIdSync(clientId, productId, workOrders);
        }
        
        public System.Threading.Tasks.Task ReassignWorkOrdersXMLIdSyncAsync(string clientId, string productId, string workOrders) {
            return base.Channel.ReassignWorkOrdersXMLIdSyncAsync(clientId, productId, workOrders);
        }
        
        public string CancelWorkOrder(string id, string clientId, string productId, string userName) {
            return base.Channel.CancelWorkOrder(id, clientId, productId, userName);
        }
        
        public System.Threading.Tasks.Task<string> CancelWorkOrderAsync(string id, string clientId, string productId, string userName) {
            return base.Channel.CancelWorkOrderAsync(id, clientId, productId, userName);
        }
        
        public void CancelWorkOrdersXML(string clientId, string productId, string cancelOrders) {
            base.Channel.CancelWorkOrdersXML(clientId, productId, cancelOrders);
        }
        
        public System.Threading.Tasks.Task CancelWorkOrdersXMLAsync(string clientId, string productId, string cancelOrders) {
            return base.Channel.CancelWorkOrdersXMLAsync(clientId, productId, cancelOrders);
        }
        
        public string CancelWorkOrdersXMLId(string clientId, string productId, string cancelOrders) {
            return base.Channel.CancelWorkOrdersXMLId(clientId, productId, cancelOrders);
        }
        
        public System.Threading.Tasks.Task<string> CancelWorkOrdersXMLIdAsync(string clientId, string productId, string cancelOrders) {
            return base.Channel.CancelWorkOrdersXMLIdAsync(clientId, productId, cancelOrders);
        }
        
        public int CancelWorkOrdersByUser(string clientId, string username) {
            return base.Channel.CancelWorkOrdersByUser(clientId, username);
        }
        
        public System.Threading.Tasks.Task<int> CancelWorkOrdersByUserAsync(string clientId, string username) {
            return base.Channel.CancelWorkOrdersByUserAsync(clientId, username);
        }
        
        public int CancelWorkOrdersByDateRange(string clientId, string productId, string externalType, string dateFrom, string dateTo) {
            return base.Channel.CancelWorkOrdersByDateRange(clientId, productId, externalType, dateFrom, dateTo);
        }
        
        public System.Threading.Tasks.Task<int> CancelWorkOrdersByDateRangeAsync(string clientId, string productId, string externalType, string dateFrom, string dateTo) {
            return base.Channel.CancelWorkOrdersByDateRangeAsync(clientId, productId, externalType, dateFrom, dateTo);
        }
        
        public void UpdateWorkOrdersXML(string clientId, string productId, string workOrders) {
            base.Channel.UpdateWorkOrdersXML(clientId, productId, workOrders);
        }
        
        public System.Threading.Tasks.Task UpdateWorkOrdersXMLAsync(string clientId, string productId, string workOrders) {
            return base.Channel.UpdateWorkOrdersXMLAsync(clientId, productId, workOrders);
        }
        
        public string UpdateWorkOrdersXMLId(string clientId, string productId, string workOrders) {
            return base.Channel.UpdateWorkOrdersXMLId(clientId, productId, workOrders);
        }
        
        public System.Threading.Tasks.Task<string> UpdateWorkOrdersXMLIdAsync(string clientId, string productId, string workOrders) {
            return base.Channel.UpdateWorkOrdersXMLIdAsync(clientId, productId, workOrders);
        }
        
        public void CleanAttachments(string clientId, string productId, string externalId, string assignedTo) {
            base.Channel.CleanAttachments(clientId, productId, externalId, assignedTo);
        }
        
        public System.Threading.Tasks.Task CleanAttachmentsAsync(string clientId, string productId, string externalId, string assignedTo) {
            return base.Channel.CleanAttachmentsAsync(clientId, productId, externalId, assignedTo);
        }
        
        public string GetWorkOrderHistoryByExternalIds(string clientId, string externalIds) {
            return base.Channel.GetWorkOrderHistoryByExternalIds(clientId, externalIds);
        }
        
        public System.Threading.Tasks.Task<string> GetWorkOrderHistoryByExternalIdsAsync(string clientId, string externalIds) {
            return base.Channel.GetWorkOrderHistoryByExternalIdsAsync(clientId, externalIds);
        }
        
        public string GetWorkOrdersStateByExternalIds(string clientId, string externalIds) {
            return base.Channel.GetWorkOrdersStateByExternalIds(clientId, externalIds);
        }
        
        public System.Threading.Tasks.Task<string> GetWorkOrdersStateByExternalIdsAsync(string clientId, string externalIds) {
            return base.Channel.GetWorkOrdersStateByExternalIdsAsync(clientId, externalIds);
        }
        
        public string GetWorkOrderStatesByPeriodAndProcess(string clientId, string parameters) {
            return base.Channel.GetWorkOrderStatesByPeriodAndProcess(clientId, parameters);
        }
        
        public System.Threading.Tasks.Task<string> GetWorkOrderStatesByPeriodAndProcessAsync(string clientId, string parameters) {
            return base.Channel.GetWorkOrderStatesByPeriodAndProcessAsync(clientId, parameters);
        }
        
        public string QueueMessageToUserName(string clientId, string productId, string userName, string sender, string content, bool isImportant) {
            return base.Channel.QueueMessageToUserName(clientId, productId, userName, sender, content, isImportant);
        }
        
        public System.Threading.Tasks.Task<string> QueueMessageToUserNameAsync(string clientId, string productId, string userName, string sender, string content, bool isImportant) {
            return base.Channel.QueueMessageToUserNameAsync(clientId, productId, userName, sender, content, isImportant);
        }
        
        public string QueueMessageToUserNames(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant) {
            return base.Channel.QueueMessageToUserNames(cliendId, productId, userNames, sender, content, isImportant);
        }
        
        public System.Threading.Tasks.Task<string> QueueMessageToUserNamesAsync(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant) {
            return base.Channel.QueueMessageToUserNamesAsync(cliendId, productId, userNames, sender, content, isImportant);
        }
        
        public string GetUserActivity(string client, string users, string initialDate, string finalDate) {
            return base.Channel.GetUserActivity(client, users, initialDate, finalDate);
        }
        
        public System.Threading.Tasks.Task<string> GetUserActivityAsync(string client, string users, string initialDate, string finalDate) {
            return base.Channel.GetUserActivityAsync(client, users, initialDate, finalDate);
        }
        
        public void DeleteUsers(string client, string users) {
            base.Channel.DeleteUsers(client, users);
        }
        
        public System.Threading.Tasks.Task DeleteUsersAsync(string client, string users) {
            return base.Channel.DeleteUsersAsync(client, users);
        }
        
        public void SetUserCatalogs(string clientId, string users, string catalogDefinition) {
            base.Channel.SetUserCatalogs(clientId, users, catalogDefinition);
        }
        
        public System.Threading.Tasks.Task SetUserCatalogsAsync(string clientId, string users, string catalogDefinition) {
            return base.Channel.SetUserCatalogsAsync(clientId, users, catalogDefinition);
        }
        
        public void SetGroup(string clientId, string users, string groupId) {
            base.Channel.SetGroup(clientId, users, groupId);
        }
        
        public System.Threading.Tasks.Task SetGroupAsync(string clientId, string users, string groupId) {
            return base.Channel.SetGroupAsync(clientId, users, groupId);
        }
        
        public void SetUsersGroups(string clientId, string xmlGroups) {
            base.Channel.SetUsersGroups(clientId, xmlGroups);
        }
        
        public System.Threading.Tasks.Task SetUsersGroupsAsync(string clientId, string xmlGroups) {
            return base.Channel.SetUsersGroupsAsync(clientId, xmlGroups);
        }
        
        public string SetUser(string clientId, string username, string password, string idrole, string groupid, string name) {
            return base.Channel.SetUser(clientId, username, password, idrole, groupid, name);
        }
        
        public System.Threading.Tasks.Task<string> SetUserAsync(string clientId, string username, string password, string idrole, string groupid, string name) {
            return base.Channel.SetUserAsync(clientId, username, password, idrole, groupid, name);
        }
        
        public bool DeleteUser(string clientId, string username) {
            return base.Channel.DeleteUser(clientId, username);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string clientId, string username) {
            return base.Channel.DeleteUserAsync(clientId, username);
        }
        
        public string GetUsersLastLoginAndVersion(string clientId, string users) {
            return base.Channel.GetUsersLastLoginAndVersion(clientId, users);
        }
        
        public System.Threading.Tasks.Task<string> GetUsersLastLoginAndVersionAsync(string clientId, string users) {
            return base.Channel.GetUsersLastLoginAndVersionAsync(clientId, users);
        }
        
        public string GetResponses(string clientId, string productId, string Date, string users) {
            return base.Channel.GetResponses(clientId, productId, Date, users);
        }
        
        public System.Threading.Tasks.Task<string> GetResponsesAsync(string clientId, string productId, string Date, string users) {
            return base.Channel.GetResponsesAsync(clientId, productId, Date, users);
        }
        
        public void DeleteResponses(string clientId, string productId, string externalIds) {
            base.Channel.DeleteResponses(clientId, productId, externalIds);
        }
        
        public System.Threading.Tasks.Task DeleteResponsesAsync(string clientId, string productId, string externalIds) {
            return base.Channel.DeleteResponsesAsync(clientId, productId, externalIds);
        }
        
        public string GetSecurityToken(string clientId, string username, string password) {
            return base.Channel.GetSecurityToken(clientId, username, password);
        }
        
        public System.Threading.Tasks.Task<string> GetSecurityTokenAsync(string clientId, string username, string password) {
            return base.Channel.GetSecurityTokenAsync(clientId, username, password);
        }
        
        public string GetLatitudeAndLongitude(string address) {
            return base.Channel.GetLatitudeAndLongitude(address);
        }
        
        public System.Threading.Tasks.Task<string> GetLatitudeAndLongitudeAsync(string address) {
            return base.Channel.GetLatitudeAndLongitudeAsync(address);
        }
        
        public bool SendWorkOrderToClient(string workOrderId, string response) {
            return base.Channel.SendWorkOrderToClient(workOrderId, response);
        }
        
        public System.Threading.Tasks.Task<bool> SendWorkOrderToClientAsync(string workOrderId, string response) {
            return base.Channel.SendWorkOrderToClientAsync(workOrderId, response);
        }
        
        public bool ReporteErrores(string error) {
            return base.Channel.ReporteErrores(error);
        }
        
        public System.Threading.Tasks.Task<bool> ReporteErroresAsync(string error) {
            return base.Channel.ReporteErroresAsync(error);
        }
    }
}
