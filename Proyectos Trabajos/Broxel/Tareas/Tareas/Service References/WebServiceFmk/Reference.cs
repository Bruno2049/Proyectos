//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PubliPayments.WebServiceFmk {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebServiceFmk.IBackEnd")]
    public interface IBackEnd {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserName", ReplyAction="http://tempuri.org/IBackEnd/AddNewWorkOrderToUserNameResponse")]
        string AddNewWorkOrderToUserName(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, PubliPayments.Negocios.WebServiceFmk.HashTableCompositeType[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/AddWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/AddWorkOrdersXMLResponse")]
        void AddWorkOrdersXML(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrder", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrderResponse")]
        string CancelWorkOrder(string id, string clientId, string productId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersXMLResponse")]
        void CancelWorkOrdersXML(string clientId, string productId, string cancelOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByUser", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PubliPayments.Negocios.WebServiceFmk.FormiikOperationFault), Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByUserFormiikOperationFaultFault", Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
        int CancelWorkOrdersByUser(string clientId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRange", ReplyAction="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PubliPayments.Negocios.WebServiceFmk.FormiikOperationFault), Action="http://tempuri.org/IBackEnd/CancelWorkOrdersByDateRangeFormiikOperationFaultFault" +
            "", Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
        int CancelWorkOrdersByDateRange(string clientId, string productId, string externalType, string dateFrom, string dateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/UpdateWorkOrdersXML", ReplyAction="http://tempuri.org/IBackEnd/UpdateWorkOrdersXMLResponse")]
        void UpdateWorkOrdersXML(string clientId, string productId, string workOrders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/CleanAttachments", ReplyAction="http://tempuri.org/IBackEnd/CleanAttachmentsResponse")]
        void CleanAttachments(string clientId, string productId, string externalId, string assignedTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrderHistoryByExternalIdsResponse")]
        string GetWorkOrderHistoryByExternalIds(string clientId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIds", ReplyAction="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIdsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(PubliPayments.Negocios.WebServiceFmk.FormiikOperationFault), Action="http://tempuri.org/IBackEnd/GetWorkOrdersStateByExternalIdsFormiikOperationFaultF" +
            "ault", Name="FormiikOperationFault", Namespace="http://schemas.datacontract.org/2004/07/Emlink.Pitzotl.BackEndPipe.DataContracts")]
        string GetWorkOrdersStateByExternalIds(string clientId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserName", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNameResponse")]
        string QueueMessageToUserName(string clientId, string productId, string userName, string sender, string content, bool isImportant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/QueueMessageToUserNames", ReplyAction="http://tempuri.org/IBackEnd/QueueMessageToUserNamesResponse")]
        string QueueMessageToUserNames(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUserActivity", ReplyAction="http://tempuri.org/IBackEnd/GetUserActivityResponse")]
        string GetUserActivity(string client, string users, string initialDate, string finalDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUsers", ReplyAction="http://tempuri.org/IBackEnd/DeleteUsersResponse")]
        void DeleteUsers(string client, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUserCatalogs", ReplyAction="http://tempuri.org/IBackEnd/SetUserCatalogsResponse")]
        void SetUserCatalogs(string clientId, string users, string catalogDefinition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetGroup", ReplyAction="http://tempuri.org/IBackEnd/SetGroupResponse")]
        void SetGroup(string clientId, string users, string groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUsersGroups", ReplyAction="http://tempuri.org/IBackEnd/SetUsersGroupsResponse")]
        void SetUsersGroups(string clientId, string xmlGroups);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SetUser", ReplyAction="http://tempuri.org/IBackEnd/SetUserResponse")]
        string SetUser(string clientId, string username, string password, string idrole, string groupid, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteUser", ReplyAction="http://tempuri.org/IBackEnd/DeleteUserResponse")]
        bool DeleteUser(string clientId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersion", ReplyAction="http://tempuri.org/IBackEnd/GetUsersLastLoginAndVersionResponse")]
        string GetUsersLastLoginAndVersion(string clientId, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetResponses", ReplyAction="http://tempuri.org/IBackEnd/GetResponsesResponse")]
        string GetResponses(string clientId, string productId, string Date, string users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/DeleteResponses", ReplyAction="http://tempuri.org/IBackEnd/DeleteResponsesResponse")]
        void DeleteResponses(string clientId, string productId, string externalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetSecurityToken", ReplyAction="http://tempuri.org/IBackEnd/GetSecurityTokenResponse")]
        string GetSecurityToken(string clientId, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/GetLatitudeAndLongitude", ReplyAction="http://tempuri.org/IBackEnd/GetLatitudeAndLongitudeResponse")]
        string GetLatitudeAndLongitude(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/SendWorkOrderToClient", ReplyAction="http://tempuri.org/IBackEnd/SendWorkOrderToClientResponse")]
        bool SendWorkOrderToClient(string workOrderId, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBackEnd/ReporteErrores", ReplyAction="http://tempuri.org/IBackEnd/ReporteErroresResponse")]
        bool ReporteErrores(string error);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBackEndChannel : PubliPayments.WebServiceFmk.IBackEnd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BackEndClient : System.ServiceModel.ClientBase<PubliPayments.WebServiceFmk.IBackEnd>, PubliPayments.WebServiceFmk.IBackEnd {
        
        public BackEndClient() {
        }
        
        public BackEndClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BackEndClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackEndClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BackEndClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddNewWorkOrderToUserName(string id, string clientId, string productId, string type, string version, string userName, int priority, string expirationDate, string cancellationDate, PubliPayments.Negocios.WebServiceFmk.HashTableCompositeType[] parameters) {
            return base.Channel.AddNewWorkOrderToUserName(id, clientId, productId, type, version, userName, priority, expirationDate, cancellationDate, parameters);
        }
        
        public void AddWorkOrdersXML(string clientId, string productId, string workOrders) {
            base.Channel.AddWorkOrdersXML(clientId, productId, workOrders);
        }
        
        public string CancelWorkOrder(string id, string clientId, string productId, string userName) {
            return base.Channel.CancelWorkOrder(id, clientId, productId, userName);
        }
        
        public void CancelWorkOrdersXML(string clientId, string productId, string cancelOrders) {
            base.Channel.CancelWorkOrdersXML(clientId, productId, cancelOrders);
        }
        
        public int CancelWorkOrdersByUser(string clientId, string username) {
            return base.Channel.CancelWorkOrdersByUser(clientId, username);
        }
        
        public int CancelWorkOrdersByDateRange(string clientId, string productId, string externalType, string dateFrom, string dateTo) {
            return base.Channel.CancelWorkOrdersByDateRange(clientId, productId, externalType, dateFrom, dateTo);
        }
        
        public void UpdateWorkOrdersXML(string clientId, string productId, string workOrders) {
            base.Channel.UpdateWorkOrdersXML(clientId, productId, workOrders);
        }
        
        public void CleanAttachments(string clientId, string productId, string externalId, string assignedTo) {
            base.Channel.CleanAttachments(clientId, productId, externalId, assignedTo);
        }
        
        public string GetWorkOrderHistoryByExternalIds(string clientId, string externalIds) {
            return base.Channel.GetWorkOrderHistoryByExternalIds(clientId, externalIds);
        }
        
        public string GetWorkOrdersStateByExternalIds(string clientId, string externalIds) {
            return base.Channel.GetWorkOrdersStateByExternalIds(clientId, externalIds);
        }
        
        public string QueueMessageToUserName(string clientId, string productId, string userName, string sender, string content, bool isImportant) {
            return base.Channel.QueueMessageToUserName(clientId, productId, userName, sender, content, isImportant);
        }
        
        public string QueueMessageToUserNames(string cliendId, string productId, string[] userNames, string sender, string content, bool isImportant) {
            return base.Channel.QueueMessageToUserNames(cliendId, productId, userNames, sender, content, isImportant);
        }
        
        public string GetUserActivity(string client, string users, string initialDate, string finalDate) {
            return base.Channel.GetUserActivity(client, users, initialDate, finalDate);
        }
        
        public void DeleteUsers(string client, string users) {
            base.Channel.DeleteUsers(client, users);
        }
        
        public void SetUserCatalogs(string clientId, string users, string catalogDefinition) {
            base.Channel.SetUserCatalogs(clientId, users, catalogDefinition);
        }
        
        public void SetGroup(string clientId, string users, string groupId) {
            base.Channel.SetGroup(clientId, users, groupId);
        }
        
        public void SetUsersGroups(string clientId, string xmlGroups) {
            base.Channel.SetUsersGroups(clientId, xmlGroups);
        }
        
        public string SetUser(string clientId, string username, string password, string idrole, string groupid, string name) {
            return base.Channel.SetUser(clientId, username, password, idrole, groupid, name);
        }
        
        public bool DeleteUser(string clientId, string username) {
            return base.Channel.DeleteUser(clientId, username);
        }
        
        public string GetUsersLastLoginAndVersion(string clientId, string users) {
            return base.Channel.GetUsersLastLoginAndVersion(clientId, users);
        }
        
        public string GetResponses(string clientId, string productId, string Date, string users) {
            return base.Channel.GetResponses(clientId, productId, Date, users);
        }
        
        public void DeleteResponses(string clientId, string productId, string externalIds) {
            base.Channel.DeleteResponses(clientId, productId, externalIds);
        }
        
        public string GetSecurityToken(string clientId, string username, string password) {
            return base.Channel.GetSecurityToken(clientId, username, password);
        }
        
        public string GetLatitudeAndLongitude(string address) {
            return base.Channel.GetLatitudeAndLongitude(address);
        }
        
        public bool SendWorkOrderToClient(string workOrderId, string response) {
            return base.Channel.SendWorkOrderToClient(workOrderId, response);
        }
        
        public bool ReporteErrores(string error) {
            return base.Channel.ReporteErrores(error);
        }
    }
}
