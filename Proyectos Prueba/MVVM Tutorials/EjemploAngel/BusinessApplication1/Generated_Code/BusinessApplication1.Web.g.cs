//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34014
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessApplication1
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using BusinessApplication1.Web;
    
    
    /// <summary>
    /// Contexto de la aplicación RIA.
    /// </summary>
    /// <remarks>
    /// Este contexto extiende la base para poner los servicios de la aplicación y los tipos a disposición
    /// del código y el xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Definiciones de método de extensibilidad

        /// <summary>
        /// Este método se invoca desde el constructor una vez completada la inicialización y
        /// se puede utilizar para configurar más objetos.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase WebContext.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Obtiene el contexto registrado como un objeto de vigencia con la aplicación actual.
        /// </summary>
        /// Si no hay ninguna aplicación actual, se produce una <exception cref="InvalidOperationException">;
        /// también si no se ha agregado contexto o si se ha agregado más de un contexto.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Obtiene un usuario que representa la identidad autenticada.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace BusinessApplication1.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using BusinessApplication1.Web.Resources;
    
    
    /// <summary>
    /// DomainContext correspondiente al DomainService 'AuthenticationService'.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Definiciones de método de extensibilidad

        /// <summary>
        /// Este método se invoca desde el constructor una vez completada la inicialización y
        /// se puede utilizar para configurar más objetos.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="AuthenticationContext"/>.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("BusinessApplication1-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="AuthenticationContext"/> con el URI del servicio especificado.
        /// </summary>
        /// <param name="serviceUri">URI del servicio AuthenticationService.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="AuthenticationContext"/> con el <paramref name="domainClient"/> especificado.
        /// </summary>
        /// <param name="domainClient">Instancia de DomainClient que se va a utilizar para este DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Obtiene el conjunto de instancias de la entidad <see cref="User"/> que se han cargado en esta instancia <see cref="AuthenticationContext"/>.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Obtiene una instancia de EntityQuery que se puede utilizar para cargar instancias de la entidad <see cref="User"/> mediante la consulta 'GetUser'.
        /// </summary>
        /// <returns>EntityQuery que se puede cargar para recuperar instancias de la entidad <see cref="User"/>.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Obtiene una instancia de EntityQuery que se puede utilizar para cargar instancias de la entidad <see cref="User"/> mediante la consulta 'Login'.
        /// </summary>
        /// <param name="userName">Valor del parámetro 'userName' de la consulta.</param>
        /// <param name="password">Valor del parámetro 'password' de la consulta.</param>
        /// <param name="isPersistent">Valor del parámetro 'isPersistent' de la consulta.</param>
        /// <param name="customData">Valor del parámetro 'customData' de la consulta.</param>
        /// <returns>EntityQuery que se puede cargar para recuperar instancias de la entidad <see cref="User"/>.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Obtiene una instancia de EntityQuery que se puede utilizar para cargar instancias de la entidad <see cref="User"/> mediante la consulta 'Logout'.
        /// </summary>
        /// <returns>EntityQuery que se puede cargar para recuperar instancias de la entidad <see cref="User"/>.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Crea un nuevo EntityContainer para los EntitySets de este DomainContext.
        /// </summary>
        /// <returns>Nueva instancia de contenedor.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Contrato de la clase Service para el DomainService 'AuthenticationService'.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Invoca de manera asincrónica la operación 'GetUser'.
            /// </summary>
            /// <param name="callback">Devolución de llamada que se va a invocar al completar.</param>
            /// <param name="asyncState">Objecto de estado opcional.</param>
            /// <returns>IAsyncResult que se puede utilizar para supervisar la solicitud.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completa la operación asincrónica iniciada por 'BeginGetUser'.
            /// </summary>
            /// <param name="result">IAsyncResult devuelto desde 'BeginGetUser'.</param>
            /// <returns>'QueryResult' devuelto desde la operación 'GetUser'.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Invoca de manera asincrónica la operación 'Login'.
            /// </summary>
            /// <param name="userName">Valor del parámetro 'userName' de esta acción.</param>
            /// <param name="password">Valor del parámetro 'password' de esta acción.</param>
            /// <param name="isPersistent">Valor del parámetro 'isPersistent' de esta acción.</param>
            /// <param name="customData">Valor del parámetro 'customData' de esta acción.</param>
            /// <param name="callback">Devolución de llamada que se va a invocar al completar.</param>
            /// <param name="asyncState">Objecto de estado opcional.</param>
            /// <returns>IAsyncResult que se puede utilizar para supervisar la solicitud.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completa la operación asincrónica iniciada por 'BeginLogin'.
            /// </summary>
            /// <param name="result">IAsyncResult devuelto desde 'BeginLogin'.</param>
            /// <returns>'QueryResult' devuelto desde la operación 'Login'.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Invoca de manera asincrónica la operación 'Logout'.
            /// </summary>
            /// <param name="callback">Devolución de llamada que se va a invocar al completar.</param>
            /// <param name="asyncState">Objecto de estado opcional.</param>
            /// <returns>IAsyncResult que se puede utilizar para supervisar la solicitud.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completa la operación asincrónica iniciada por 'BeginLogout'.
            /// </summary>
            /// <param name="result">IAsyncResult devuelto desde 'BeginLogout'.</param>
            /// <returns>'QueryResult' devuelto desde la operación 'Logout'.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Invoca de manera asincrónica la operación 'SubmitChanges'.
            /// </summary>
            /// <param name="changeSet">Conjunto de cambios que se va a enviar.</param>
            /// <param name="callback">Devolución de llamada que se va a invocar al completar.</param>
            /// <param name="asyncState">Objecto de estado opcional.</param>
            /// <returns>IAsyncResult que se puede utilizar para supervisar la solicitud.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completa la operación asincrónica iniciada por 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">IAsyncResult devuelto desde 'BeginSubmitChanges'.</param>
            /// <returns>Colección de elementos de entrada del conjunto de cambios devuelta desde 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// La clase 'RegistrationData'.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/BusinessApplication1.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Definiciones de método de extensibilidad

        /// <summary>
        /// Este método se invoca desde el constructor una vez completada la inicialización y
        /// se puede utilizar para configurar más objetos.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="RegistrationData"/>.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'Answer'.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'Email'.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'FriendlyName'.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'Question'.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'UserName'.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// Clase de entidad 'User'.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/BusinessApplication1.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Definiciones de método de extensibilidad

        /// <summary>
        /// Este método se invoca desde el constructor una vez completada la inicialización y
        /// se puede utilizar para configurar más objetos.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="User"/>.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'FriendlyName'.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'Name'.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Obtiene o establece el valor 'Roles'.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Obtiene un valor que indica si la identidad está autenticada.
        /// </summary>
        /// <remarks>
        /// Este valor es <c>true</c> si <see cref="Name"/> no es <c>null</c> o está vacía.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Calcula un valor a partir de los campos de clave que identifica de manera única  esta instancia de la entidad.
        /// </summary>
        /// <returns>Instancia de objeto que identifica de manera única esta instancia de la entidad.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Devuelve si la entidad de seguridad está en el rol.
        /// </summary>
        /// <remarks>
        /// Devuelve si el rol especificado está incluido en los roles.
        /// Esta implementación distingue entre mayúsculas y minúsculas.
        /// </remarks>
        /// <param name="role">Nombre del rol cuya pertenencia se va a comprobar.</param>
        /// <returns>Si la entidad de seguridad está en el rol.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// DomainContext correspondiente al DomainService 'UserRegistrationService'.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Definiciones de método de extensibilidad

        /// <summary>
        /// Este método se invoca desde el constructor una vez completada la inicialización y
        /// se puede utilizar para configurar más objetos.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="UserRegistrationContext"/>.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("BusinessApplication1-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="UserRegistrationContext"/> con el URI del servicio especificado.
        /// </summary>
        /// <param name="serviceUri">URI del servicio UserRegistrationService.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="UserRegistrationContext"/> con el <paramref name="domainClient"/> especificado.
        /// </summary>
        /// <param name="domainClient">Instancia de DomainClient que se va a utilizar para este DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Invoca de manera asincrónica el método 'CreateUser' del DomainService.
        /// </summary>
        /// <param name="user">Valor del parámetro 'user' de esta acción.</param>
        /// <param name="password">Valor del parámetro 'password' de esta acción.</param>
        /// <param name="callback">Devolución de llamada que se va a invocar cuando se complete la operación.</param>
        /// <param name="userState">Valor que se va a pasar a la devolución de llamada. Puede ser <c>null</c>.</param>
        /// <returns>Instancia de operación que se puede utilizar para administrar la solicitud asincrónica.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Invoca de manera asincrónica el método 'CreateUser' del DomainService.
        /// </summary>
        /// <param name="user">Valor del parámetro 'user' de esta acción.</param>
        /// <param name="password">Valor del parámetro 'password' de esta acción.</param>
        /// <returns>Instancia de operación que se puede utilizar para administrar la solicitud asincrónica.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Crea un nuevo EntityContainer para los EntitySets de este DomainContext.
        /// </summary>
        /// <returns>Nueva instancia de contenedor.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Contrato de la clase Service para el DomainService 'UserRegistrationService'.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Invoca de manera asincrónica la operación 'CreateUser'.
            /// </summary>
            /// <param name="user">Valor del parámetro 'user' de esta acción.</param>
            /// <param name="password">Valor del parámetro 'password' de esta acción.</param>
            /// <param name="callback">Devolución de llamada que se va a invocar al completar.</param>
            /// <param name="asyncState">Objecto de estado opcional.</param>
            /// <returns>IAsyncResult que se puede utilizar para supervisar la solicitud.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completa la operación asincrónica iniciada por 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">IAsyncResult devuelto desde 'BeginCreateUser'.</param>
            /// <returns>'CreateUserStatus' devuelto desde la operación 'CreateUser'.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
