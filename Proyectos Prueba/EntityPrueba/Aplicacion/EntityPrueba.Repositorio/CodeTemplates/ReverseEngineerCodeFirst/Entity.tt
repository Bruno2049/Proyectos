<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #>
<#@ output extension=".cs" #>
<#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);

    if (!((efHost.EntityType.Name == "AspNetUserRole") || (efHost.EntityType.Name == "AspNetUserClaim") || (efHost.EntityType.Name == "AspNetUserLogin") || (efHost.EntityType.Name == "AspNetRole")))
    {
		var isUserTable = efHost.EntityType.Name == "AspNetUser";
#>
using System;
using System.Collections.Generic;
using Microsoft.AspNet.Identity.EntityFramework;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityType.Name #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
            var propName = code.Escape(navProperty);
            var propType = code.Escape(navProperty.ToEndMember.GetEntityType());
            if (isUserTable)
            {
                switch (propName)
                {
                    case "AspNetUserClaims":
                        propName = "Claims";
                        propType = "IdentityUserClaim";
                        continue;
                    case "AspNetUserRoles":
						propType = "IdentityUserRole";
						continue;
					case "AspNetRoles":
                        propName = "Roles";
						propType = "IdentityRole";
                        continue;
                    case "AspNetUserLogins":
                        propName = "Logins";
						propType = "IdentityUserLogin";
                        continue;
                }

            }
#>
            this.<#= propName #> = new List<<#= propType #>>();
<#
        }
#>
        }
<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
		var propName = code.Escape(property);
        if (isUserTable)
        {
            if (propName == "Id" || propName == "UserName" 
				|| propName == "PasswordHash"
				|| propName == "SecurityStamp"
				|| propName == "Email"
				|| propName == "EmailConfirmed"
				|| propName == "PhoneNumber"
				|| propName == "PhoneNumberConfirmed"
				|| propName == "TwoFactorEnabled"
				|| propName == "LockoutEndDateUtc"
				|| propName == "LockoutEnabled"
				|| propName == "AccessFailedCount"
				)
            {
                continue;
            }
        }
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= propName #> { get; set; }
<#
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
		if (isUserTable)
        {
            var propName = code.Escape(navProperty);
            if (propName == "AspNetUserClaims" || propName == "AspNetUserLogins" 
				|| propName == "AspNetUserRoles"
				|| propName == "AspNetRoles")
            {
                continue;
            }
        }
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
        else
        {
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        }
    }
#>
		public void Copy(<#= efHost.EntityType.Name #> source)
		{
<#

	foreach (var property in efHost.EntityType.Properties)
    {
		var propName = code.Escape(property);
		
#>
			<#= propName #> = source.<#= propName #>;
<#		
	}
#>
		}
    }
}
<#
    }
#>
